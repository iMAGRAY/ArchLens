#!/usr/bin/env node

// üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç MCP Server - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –¥–æ—Å—Ç—É–ø–∞');
console.log('‚ïê'.repeat(60));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
const binaryPath = path.join(__dirname, 'archlens.exe');
console.log(`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞: ${binaryPath}`);

if (!fs.existsSync(binaryPath)) {
    console.error('‚ùå –ë–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
}

const stats = fs.statSync(binaryPath);
console.log(`‚úÖ –ë–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω (${(stats.size / 1024 / 1024).toFixed(1)} MB)`);

// –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –ø–∞–ø–æ–∫
const testPaths = [
    '.',
    '..',
    path.join(__dirname, '..', 'src'),
];

async function testPathAnalysis(testPath) {
    return new Promise((resolve) => {
        console.log(`\nüîç –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞: ${testPath}`);
        console.log('‚îÄ'.repeat(40));
        
        const child = spawn(binaryPath, ['analyze', testPath], {
            stdio: 'pipe',
            cwd: __dirname
        });
        
        let stdout = '';
        let stderr = '';
        
        child.stdout.on('data', (data) => {
            stdout += data.toString();
        });
        
        child.stderr.on('data', (data) => {
            stderr += data.toString();
        });
        
        child.on('close', (code) => {
            if (code === 0) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ (–∫–æ–¥ ${code})`);
                try {
                    const result = JSON.parse(stdout);
                    console.log(`üìä –§–∞–π–ª–æ–≤: ${result.total_files}, —Å—Ç—Ä–æ–∫: ${result.total_lines}`);
                } catch (e) {
                    console.log(`üìä –í—ã–≤–æ–¥: ${stdout.substring(0, 100)}...`);
                }
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ (–∫–æ–¥ ${code})`);
                console.log(`üìã STDERR: ${stderr}`);
                console.log(`üìã STDOUT: ${stdout}`);
            }
            resolve(code);
        });
        
        child.on('error', (err) => {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err.message}`);
            resolve(-1);
        });
    });
}

// –¢–µ—Å—Ç –≤—Å–µ—Ö –ø—É—Ç–µ–π
async function runAllTests() {
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞...');
    
    for (const testPath of testPaths) {
        await testPathAnalysis(testPath);
    }
    
    console.log('\nüéØ –¢–µ—Å—Ç AI Compact —ç–∫—Å–ø–æ—Ä—Ç–∞...');
    console.log('‚îÄ'.repeat(40));
    
    const child = spawn(binaryPath, ['export', '.', 'ai_compact'], {
        stdio: 'pipe',
        cwd: __dirname
    });
    
    let stdout = '';
    let stderr = '';
    
    child.stdout.on('data', (data) => {
        stdout += data.toString();
    });
    
    child.stderr.on('data', (data) => {
        stderr += data.toString();
    });
    
    child.on('close', (code) => {
        if (code === 0) {
            console.log(`‚úÖ AI Compact —É—Å–ø–µ—à–Ω–æ (–∫–æ–¥ ${code})`);
            console.log(`üìÑ –î–ª–∏–Ω–∞ –≤—ã–≤–æ–¥–∞: ${stdout.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        } else {
            console.log(`‚ùå AI Compact –æ—à–∏–±–∫–∞ (–∫–æ–¥ ${code})`);
            console.log(`üìã STDERR: ${stderr}`);
        }
    });
}

runAllTests().catch(console.error); 