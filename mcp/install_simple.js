#!/usr/bin/env node

// üõ†Ô∏è –ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ArchLens MCP Server
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üõ†Ô∏è ArchLens MCP Server - –ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
console.log('‚îÄ'.repeat(50));

try {
  const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ Node.js: ${nodeVersion}`);
  
  const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ npm: ${npmVersion}`);
} catch (error) {
  console.error('‚ùå Node.js –∏–ª–∏ npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
  process.exit(1);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('\n‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
console.log('‚îÄ'.repeat(50));

const currentPath = __dirname;
const serverPath = path.join(currentPath, 'archlens_mcp_server.cjs');

const config = {
  "mcp.servers": {
    "archlens": {
      "command": "node",
      "args": [serverPath],
      "cwd": currentPath
    }
  }
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const configPath = path.join(__dirname, 'cursor_config.json');
fs.writeFileSync(configPath, JSON.stringify(config, null, 2));

console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${configPath}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ ArchLens');
console.log('‚îÄ'.repeat(50));

const binaryPaths = [
  path.join(__dirname, '..', 'target', 'release', 'archlens.exe'),
  path.join(__dirname, '..', 'target', 'debug', 'archlens.exe')
];

let binaryFound = false;
for (const binPath of binaryPaths) {
  if (fs.existsSync(binPath)) {
    console.log(`‚úÖ –ë–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: ${binPath}`);
    binaryFound = true;
    break;
  }
}

if (!binaryFound) {
  console.log('‚ö†Ô∏è –ë–∏–Ω–∞—Ä–Ω–∏–∫ ArchLens –Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: cargo build --release');
}

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
console.log('\nüéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cursor');
console.log('‚îÄ'.repeat(50));

console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Cursor (Ctrl+,)');
console.log('2. –ù–∞–∂–º–∏—Ç–µ –∏–∫–æ–Ω–∫—É {} –¥–ª—è settings.json');
console.log('3. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:');
console.log('');
console.log(JSON.stringify(config, null, 2));
console.log('');
console.log('4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor');
console.log('5. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ: "–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —É —Ç–µ–±—è –µ—Å—Ç—å?"');

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
const instructions = `# ArchLens MCP Server - –ù–∞—Å—Ç—Ä–æ–π–∫–∞

## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Cursor:
${JSON.stringify(config, null, 2)}

## –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- "–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —É —Ç–µ–±—è –µ—Å—Ç—å?"
- "–ü–æ–∫–∞–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–∞–ø–∫–µ ${path.join(__dirname, '..')}"
- "–°–æ–∑–¥–∞–π Mermaid –¥–∏–∞–≥—Ä–∞–º–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
- "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤ AI Compact —Ñ–æ—Ä–º–∞—Ç"

## –§–∞–π–ª—ã:
- –°–µ—Ä–≤–µ—Ä: ${serverPath}
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${configPath}
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${path.join(__dirname, 'README.md')}
`;

fs.writeFileSync(path.join(__dirname, 'setup_complete.md'), instructions);

console.log('\nüéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
console.log('‚îÄ'.repeat(50));
console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
console.log('‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ setup_complete.md');
console.log('');
console.log('üöÄ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∞–Ω–∞–ª–∏–∑–æ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ Cursor!'); 