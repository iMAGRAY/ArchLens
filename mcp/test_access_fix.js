#!/usr/bin/env node

// üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –æ—à–∏–±–∫–∞–º –¥–æ—Å—Ç—É–ø–∞
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞');
console.log('‚ïê'.repeat(60));

// –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
console.log('\nüîç –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞');
console.log('‚îÄ'.repeat(40));

const binaryPath = path.join(__dirname, 'archlens.exe');
const testPaths = [
    { path: '.', name: '–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ mcp' },
    { path: '..', name: '–ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞' },
    { path: 'C:\\Windows\\System32', name: '–°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–ø–∫–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)' }
];

async function testBinaryAccess() {
    for (const testCase of testPaths) {
        console.log(`\nüìã –¢–µ—Å—Ç: ${testCase.name} (${testCase.path})`);
        
        const child = spawn(binaryPath, ['analyze', testCase.path], {
            stdio: 'pipe',
            cwd: __dirname
        });
        
        let stdout = '';
        let stderr = '';
        
        child.stdout.on('data', (data) => {
            stdout += data.toString();
        });
        
        child.stderr.on('data', (data) => {
            stderr += data.toString();
        });
        
        child.on('close', (code) => {
            if (code === 0) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ (–∫–æ–¥ ${code})`);
                try {
                    const result = JSON.parse(stdout);
                    console.log(`üìä –§–∞–π–ª–æ–≤: ${result.total_files || 'N/A'}`);
                } catch (e) {
                    console.log(`üìä –í—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω`);
                }
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ (–∫–æ–¥ ${code})`);
                if (stderr.includes('os error 5') || stderr.includes('Access is denied')) {
                    console.log(`üîí –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–ø–æ–∫`);
                } else {
                    console.log(`üìã –û—à–∏–±–∫–∞: ${stderr.substring(0, 200)}...`);
                }
            }
        });
        
        await new Promise(resolve => child.on('close', resolve));
    }
}

// –¢–µ—Å—Ç AI Compact —ç–∫—Å–ø–æ—Ä—Ç–∞
console.log('\nü§ñ –¢–µ—Å—Ç 2: AI Compact —ç–∫—Å–ø–æ—Ä—Ç');
console.log('‚îÄ'.repeat(40));

async function testAICompactExport() {
    const child = spawn(binaryPath, ['export', '.', 'ai_compact'], {
        stdio: 'pipe',
        cwd: __dirname
    });
    
    let stdout = '';
    let stderr = '';
    
    child.stdout.on('data', (data) => {
        stdout += data.toString();
    });
    
    child.stderr.on('data', (data) => {
        stderr += data.toString();
    });
    
    child.on('close', (code) => {
        if (code === 0) {
            console.log(`‚úÖ AI Compact —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω`);
            console.log(`üìÑ –î–ª–∏–Ω–∞ –≤—ã–≤–æ–¥–∞: ${stdout.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            console.log(`üî¢ –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${Math.ceil(stdout.length / 4)}`);
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ AI Compact —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∫–æ–¥ ${code})`);
            console.log(`üìã –û—à–∏–±–∫–∞: ${stderr}`);
        }
    });
    
    await new Promise(resolve => child.on('close', resolve));
}

// –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
console.log('\nüìä –¢–µ—Å—Ç 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞');
console.log('‚îÄ'.repeat(40));

async function testProjectStructure() {
    const child = spawn(binaryPath, ['structure', '..'], {
        stdio: 'pipe',
        cwd: __dirname
    });
    
    let stdout = '';
    let stderr = '';
    
    child.stdout.on('data', (data) => {
        stdout += data.toString();
    });
    
    child.stderr.on('data', (data) => {
        stderr += data.toString();
    });
    
    child.on('close', (code) => {
        if (code === 0) {
            console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            try {
                const result = JSON.parse(stdout);
                console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.total_files || 'N/A'}`);
                console.log(`üìã –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤: ${Object.keys(result.file_types || {}).length || 'N/A'}`);
            } catch (e) {
                console.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞`);
            }
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–∫–æ–¥ ${code})`);
            console.log(`üìã –û—à–∏–±–∫–∞: ${stderr}`);
        }
    });
    
    await new Promise(resolve => child.on('close', resolve));
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
    try {
        await testBinaryAccess();
        await testAICompactExport();
        await testProjectStructure();
        
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
        console.log('‚ïê'.repeat(60));
        console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫');
        console.log('üìã –ü—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
    }
}

runAllTests(); 