#!/usr/bin/env node

// üß™ –¢–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ ArchLens
// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

const { spawn } = require('child_process');
const path = require('path');

async function testMCPServer() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ArchLens MCP Server...\n');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    const testRequest = {
      jsonrpc: "2.0",
      id: 1,
      method: "tools/call",
      params: {
        name: "get_project_structure",
        arguments: {
          project_path: path.join(__dirname, ".."),
          max_files: 10,
          show_metrics: true
        }
      }
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:');
    console.log(JSON.stringify(testRequest, null, 2));
    console.log('\n‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞...\n');
    
    const child = spawn('node', ['archlens_mcp_server.cjs'], {
      stdio: ['pipe', 'pipe', 'pipe'],
      cwd: __dirname
    });
    
    let response = '';
    
    child.stdout.on('data', (data) => {
      response += data.toString();
    });
    
    child.stderr.on('data', (data) => {
      console.log('‚ÑπÔ∏è –õ–æ–≥ —Å–µ—Ä–≤–µ—Ä–∞:', data.toString().trim());
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    child.stdin.write(JSON.stringify(testRequest) + '\n');
    
    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
    setTimeout(() => {
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
      if (response) {
        try {
          const parsed = JSON.parse(response);
          console.log(JSON.stringify(parsed, null, 2));
        } catch (e) {
          console.log(response);
        }
      } else {
        console.log('‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      child.kill();
      console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    }, 3000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testMCPServer();
}

module.exports = { testMCPServer }; 