#!/usr/bin/env node

// üß™ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–∞ ArchLens
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const { performance } = require('perf_hooks');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const config = {
    binaryPath: path.join(__dirname, 'archlens.exe'),
    timeoutMs: 30000,
    verboseMode: process.argv.includes('--verbose'),
    skipSystemTests: process.argv.includes('--skip-system'),
    includePerformance: process.argv.includes('--performance'),
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    reset: '\x1b[0m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    bold: '\x1b[1m',
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = {
    info: (msg) => console.log(`${colors.blue}‚Ñπ${colors.reset} ${msg}`),
    success: (msg) => console.log(`${colors.green}‚úÖ${colors.reset} ${msg}`),
    error: (msg) => console.log(`${colors.red}‚ùå${colors.reset} ${msg}`),
    warning: (msg) => console.log(`${colors.yellow}‚ö†${colors.reset} ${msg}`),
    debug: (msg) => config.verboseMode && console.log(`${colors.cyan}üîç${colors.reset} ${msg}`),
    header: (msg) => console.log(`\n${colors.bold}${colors.magenta}üß™ ${msg}${colors.reset}`),
    separator: () => console.log(`${colors.cyan}${'‚îÄ'.repeat(60)}${colors.reset}`),
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
const testStats = {
    total: 0,
    passed: 0,
    failed: 0,
    skipped: 0,
    startTime: performance.now(),
};

// –ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
class TestRunner {
    constructor(name) {
        this.name = name;
        this.tests = [];
        this.beforeAll = null;
        this.afterAll = null;
    }
    
    addTest(name, testFn, options = {}) {
        this.tests.push({ name, testFn, options });
        return this;
    }
    
    setBefore(fn) {
        this.beforeAll = fn;
        return this;
    }
    
    setAfter(fn) {
        this.afterAll = fn;
        return this;
    }
    
    async run() {
        logger.header(`${this.name}`);
        logger.separator();
        
        if (this.beforeAll) {
            try {
                await this.beforeAll();
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –≤ beforeAll: ${error.message}`);
                return;
            }
        }
        
        for (const test of this.tests) {
            if (test.options.skip) {
                logger.warning(`–ü—Ä–æ–ø—É—â–µ–Ω: ${test.name}`);
                testStats.skipped++;
                continue;
            }
            
            testStats.total++;
            
            try {
                logger.info(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${test.name}`);
                const startTime = performance.now();
                
                await test.testFn();
                
                const duration = performance.now() - startTime;
                logger.success(`${test.name} ${config.includePerformance ? `(${duration.toFixed(2)}ms)` : ''}`);
                testStats.passed++;
            } catch (error) {
                logger.error(`${test.name}: ${error.message}`);
                logger.debug(`–°—Ç–µ–∫: ${error.stack}`);
                testStats.failed++;
            }
        }
        
        if (this.afterAll) {
            try {
                await this.afterAll();
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –≤ afterAll: ${error.message}`);
            }
        }
    }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
async function runCommand(args, options = {}) {
    return new Promise((resolve, reject) => {
        const child = spawn(config.binaryPath, args, {
            stdio: 'pipe',
            cwd: __dirname,
            timeout: config.timeoutMs,
            ...options
        });
        
        let stdout = '';
        let stderr = '';
        
        child.stdout.on('data', (data) => {
            stdout += data.toString();
        });
        
        child.stderr.on('data', (data) => {
            stderr += data.toString();
        });
        
        child.on('close', (code) => {
            resolve({ code, stdout, stderr });
        });
        
        child.on('error', (err) => {
            reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err.message}`));
        });
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
function validateJSON(jsonString, allowEmpty = false) {
    if (!jsonString.trim() && allowEmpty) return true;
    
    try {
        JSON.parse(jsonString);
        return true;
    } catch {
        return false;
    }
}

// –¢–µ—Å—Ç—ã –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
const basicTests = new TestRunner('–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã')
    .setBefore(() => {
        if (!fs.existsSync(config.binaryPath)) {
            throw new Error(`–ë–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${config.binaryPath}`);
        }
        
        const stats = fs.statSync(config.binaryPath);
        logger.info(`–ë–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: ${(stats.size / 1024 / 1024).toFixed(1)} MB`);
    })
    .addTest('–í–µ—Ä—Å–∏—è –∏ —Å–ø—Ä–∞–≤–∫–∞', async () => {
        const { code, stdout } = await runCommand(['--version']);
        if (code !== 0) {
            throw new Error(`–ö–æ–º–∞–Ω–¥–∞ --version –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ ${code}`);
        }
        if (!stdout.includes('archinalysator') && !stdout.includes('archlens')) {
            throw new Error('–í–µ—Ä—Å–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ');
        }
    })
    .addTest('–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏', async () => {
        const { code, stdout, stderr } = await runCommand(['analyze', '.']);
        if (code !== 0) {
            throw new Error(`–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: ${stderr}`);
        }
        
        if (!validateJSON(stdout)) {
            throw new Error('–í—ã–≤–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON');
        }
        
        const result = JSON.parse(stdout);
        if (!result.total_files || result.total_files === 0) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        }
    })
    .addTest('–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', async () => {
        const { code, stdout, stderr } = await runCommand(['analyze', '..']);
        if (code !== 0) {
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º –¥–æ—Å—Ç—É–ø–∞
            if (stderr.includes('os error 5') || stderr.includes('Access is denied')) {
                logger.warning('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
                return;
            }
            throw new Error(`–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: ${stderr}`);
        }
        
        if (validateJSON(stdout)) {
            const result = JSON.parse(stdout);
            if (result.total_files && result.total_files > 0) {
                logger.debug(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.total_files}`);
            }
        }
    });

// –¢–µ—Å—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
const exportTests = new TestRunner('–¢–µ—Å—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞')
    .addTest('AI Compact —ç–∫—Å–ø–æ—Ä—Ç', async () => {
        const { code, stdout, stderr } = await runCommand(['export', '.', 'ai_compact']);
        if (code !== 0) {
            throw new Error(`AI Compact —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: ${stderr}`);
        }
        
        if (stdout.length === 0) {
            throw new Error('–ü—É—Å—Ç–æ–π –≤—ã–≤–æ–¥ AI Compact');
        }
        
        const tokenCount = Math.ceil(stdout.length / 4);
        logger.debug(`–≠–∫—Å–ø–æ—Ä—Ç: ${stdout.length} —Å–∏–º–≤–æ–ª–æ–≤, ~${tokenCount} —Ç–æ–∫–µ–Ω–æ–≤`);
    })
    .addTest('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞', async () => {
        const { code, stdout, stderr } = await runCommand(['structure', '..']);
        if (code !== 0) {
            throw new Error(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ —É–¥–∞–ª–æ—Å—å: ${stderr}`);
        }
        
        if (!validateJSON(stdout)) {
            throw new Error('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON');
        }
        
        const result = JSON.parse(stdout);
        if (!result.total_files) {
            throw new Error('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö');
        }
        
        logger.debug(`–°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${result.total_files} —Ñ–∞–π–ª–æ–≤, ${Object.keys(result.file_types || {}).length} —Ç–∏–ø–æ–≤`);
    });

// –¢–µ—Å—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
const resillienceTests = new TestRunner('–¢–µ—Å—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏')
    .addTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—É—Ç–∏', async () => {
        const { code, stderr } = await runCommand(['analyze', './nonexistent_path_12345']);
        if (code === 0) {
            logger.warning('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—É—Ç–∏');
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if (!stderr.includes('not found') && !stderr.includes('No such file')) {
            logger.debug('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }
    })
    .addTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–ø–∫–∏', async () => {
        if (config.skipSystemTests) {
            throw new Error('–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω –ø–æ —Ñ–ª–∞–≥—É --skip-system');
        }
        
        const { code, stderr } = await runCommand(['analyze', 'C:\\Windows\\System32']);
        if (code !== 0) {
            if (stderr.includes('os error 5') || stderr.includes('Access is denied')) {
                logger.debug('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${stderr}`);
            }
        }
    }, { skip: config.skipSystemTests })
    .addTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–π –ø–∞–ø–∫–∏', async () => {
        const tempDir = path.join(__dirname, 'temp_empty_test');
        
        try {
            fs.mkdirSync(tempDir, { recursive: true });
            
            const { code, stdout } = await runCommand(['analyze', tempDir]);
            if (code !== 0) {
                throw new Error('–ê–Ω–∞–ª–∏–∑ –ø—É—Å—Ç–æ–π –ø–∞–ø–∫–∏ –Ω–µ —É–¥–∞–ª—Å—è');
            }
            
            if (validateJSON(stdout)) {
                const result = JSON.parse(stdout);
                if (result.total_files !== 0) {
                    logger.debug(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø—É—Å—Ç–æ–π –ø–∞–ø–∫–µ: ${result.total_files}`);
                }
            }
        } finally {
            if (fs.existsSync(tempDir)) {
                fs.rmSync(tempDir, { recursive: true });
            }
        }
    });

// –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const performanceTests = new TestRunner('–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    .addTest('–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞', async () => {
        const startTime = performance.now();
        const { code } = await runCommand(['analyze', '..']);
        const duration = performance.now() - startTime;
        
        if (code !== 0) {
            throw new Error('–ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —É–¥–∞–ª—Å—è');
        }
        
        logger.info(`–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${duration.toFixed(2)}ms`);
        
        if (duration > 10000) {
            logger.warning('–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ (>10s)');
        }
    }, { skip: !config.includePerformance })
    .addTest('–ü–∞–º—è—Ç—å –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ', async () => {
        const beforeMemory = process.memoryUsage();
        await runCommand(['analyze', '..']);
        const afterMemory = process.memoryUsage();
        
        const memoryDiff = afterMemory.heapUsed - beforeMemory.heapUsed;
        logger.debug(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${(memoryDiff / 1024 / 1024).toFixed(2)} MB`);
    }, { skip: !config.includePerformance });

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log(`${colors.bold}${colors.magenta}üß™ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä ArchLens MCP${colors.reset}`);
    console.log(`${colors.cyan}‚ïê${'‚ïê'.repeat(60)}${colors.reset}`);
    
    logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
    logger.debug(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${JSON.stringify(config, null, 2)}`);
    
    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    await basicTests.run();
    await exportTests.run();
    await resillienceTests.run();
    if (config.includePerformance) {
        await performanceTests.run();
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalTime = performance.now() - testStats.startTime;
    console.log(`\n${colors.bold}${colors.magenta}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è${colors.reset}`);
    console.log(`${colors.cyan}‚ïê${'‚ïê'.repeat(60)}${colors.reset}`);
    
    logger.info(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testStats.total}`);
    logger.success(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${testStats.passed}`);
    if (testStats.failed > 0) {
        logger.error(`–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${testStats.failed}`);
    }
    if (testStats.skipped > 0) {
        logger.warning(`–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${testStats.skipped}`);
    }
    logger.info(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(totalTime / 1000).toFixed(2)}s`);
    
    const success = testStats.failed === 0;
    console.log(`\n${success ? colors.green + 'üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!' : colors.red + 'üí• –ï—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã!'}${colors.reset}`);
    
    if (success) {
        console.log(`${colors.green}‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ${colors.reset}`);
        console.log(`${colors.green}üìã –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${colors.reset}`);
        console.log(`${colors.green}üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ${colors.reset}`);
    } else {
        console.log(`${colors.red}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞${colors.reset}`);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
    logger.error(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
});

// –°–ø—Ä–∞–≤–∫–∞
if (process.argv.includes('--help')) {
    console.log(`
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä ArchLens MCP

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test_unified.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --verbose        –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  --skip-system    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–ø–æ–∫
  --performance    –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  --help           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node test_unified.js                           # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
  node test_unified.js --verbose                 # –° –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
  node test_unified.js --performance --verbose   # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
`);
    process.exit(0);
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
    logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
}); 