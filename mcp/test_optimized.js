#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testMCPTool(toolName, args) {
  return new Promise((resolve) => {
    log('cyan', `\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é ${toolName}...`);
    
    const mcpRequest = JSON.stringify({
      jsonrpc: "2.0",
      id: 1,
      method: "tools/call",
      params: {
        name: toolName,
        arguments: args
      }
    });
    
    const child = spawn('node', ['archlens_mcp_server.cjs'], {
      cwd: __dirname,
      stdio: ['pipe', 'pipe', 'pipe']
    });
    
    let output = '';
    let stderr = '';
    
    child.stdout.on('data', (data) => {
      output += data.toString();
    });
    
    child.stderr.on('data', (data) => {
      stderr += data.toString();
    });
    
    child.on('close', (code) => {
      try {
        // –ò—â–µ–º JSON –æ—Ç–≤–µ—Ç –≤ –≤—ã–≤–æ–¥–µ
        const jsonMatch = output.match(/\{.*\}/s);
        if (jsonMatch) {
          const response = JSON.parse(jsonMatch[0]);
          if (response.result && response.result.content) {
            const content = response.result.content[0].text;
            const tokenCount = content.length;
            log('green', `‚úÖ ${toolName}: ${tokenCount} —Å–∏–º–≤–æ–ª–æ–≤`);
            log('blue', `üìù –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:\n${content.substring(0, 200)}...`);
            resolve({ success: true, content, tokenCount });
          } else {
            log('red', `‚ùå ${toolName}: –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ`);
            resolve({ success: false, error: 'No content' });
          }
        } else {
          log('red', `‚ùå ${toolName}: –ù–µ—Ç JSON –æ—Ç–≤–µ—Ç–∞`);
          resolve({ success: false, error: 'No JSON response' });
        }
      } catch (error) {
        log('red', `‚ùå ${toolName}: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - ${error.message}`);
        resolve({ success: false, error: error.message });
      }
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    child.stdin.write(mcpRequest + '\n');
    child.stdin.end();
    
    // Timeout —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      child.kill();
      log('yellow', `‚è∞ ${toolName}: Timeout`);
      resolve({ success: false, error: 'Timeout' });
    }, 15000);
  });
}

async function main() {
  log('magenta', 'üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
  log('white', '‚ïê'.repeat(60));
  
  const tests = [
    {
      name: 'analyze_project',
      args: { project_path: '..' }  // –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    },
    {
      name: 'get_project_structure', 
      args: { project_path: '..', max_files: 10 }
    },
    {
      name: 'export_ai_compact',
      args: { project_path: '..' }
    }
  ];
  
  let passed = 0;
  let total = tests.length;
  
  for (const test of tests) {
    const result = await testMCPTool(test.name, test.args);
    if (result.success) {
      passed++;
    }
  }
  
  log('white', '\n' + '‚ïê'.repeat(60));
  log('magenta', 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
  log('white', `–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
  
  if (passed === total) {
    log('green', 'üéâ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ò–ò!');
  } else {
    log('yellow', '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
  }
}

main().catch(console.error); 