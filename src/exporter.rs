// #–î–û–î–ï–õ–ê–¢–¨: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Exporter –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

use crate::core::*;
use std::path::Path;
use serde_json;

/// –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
#[derive(Debug)]
pub struct Exporter {
    #[allow(dead_code)]
    mermaid_theme: String,
}

impl Exporter {
    pub fn new() -> Self {
        Self {
            mermaid_theme: "default".to_string(),
        }
    }
    
    pub fn with_theme(theme: String) -> Self {
        Self {
            mermaid_theme: theme,
        }
    }
    
    pub fn export(&self, graph: &CapsuleGraph, format: ExportFormat, output_path: &Path) -> Result<String> {
        let content = match format {
            ExportFormat::Json => self.export_to_json(graph)?,
            ExportFormat::Yaml => self.export_to_yaml(graph)?,
            ExportFormat::Mermaid => self.export_to_mermaid(graph)?,
            ExportFormat::DOT => self.export_to_dot(graph)?,
            ExportFormat::GraphML => self.export_to_graphml(graph)?,
            ExportFormat::ChainOfThought => self.export_to_chain_of_thought(graph)?,
            ExportFormat::LLMPrompt => self.export_to_llm_prompt(graph)?,
        };
        
        std::fs::write(output_path, &content)?;
        Ok(content)
    }
    
    pub fn export_to_json(&self, graph: &CapsuleGraph) -> Result<String> {
        // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è JSON
        let json_graph = JsonGraph::from_capsule_graph(graph);
        let json = serde_json::to_string_pretty(&json_graph)
            .map_err(|e| AnalysisError::Internal(format!("JSON serialization error: {}", e)))?;
        Ok(json)
    }
    
    pub fn export_to_yaml(&self, graph: &CapsuleGraph) -> Result<String> {
        let mut yaml = String::new();
        
        yaml.push_str("# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞\n");
        yaml.push_str(&format!("created_at: '{}'\n", graph.created_at.format("%Y-%m-%d %H:%M:%S UTC")));
        yaml.push_str("\n");
        
        // –ú–µ—Ç—Ä–∏–∫–∏
        yaml.push_str("metrics:\n");
        yaml.push_str(&format!("  total_capsules: {}\n", graph.metrics.total_capsules));
        yaml.push_str(&format!("  total_relations: {}\n", graph.metrics.total_relations));
        yaml.push_str(&format!("  complexity_average: {:.2}\n", graph.metrics.complexity_average));
        yaml.push_str(&format!("  coupling_index: {:.2}\n", graph.metrics.coupling_index));
        yaml.push_str(&format!("  cohesion_index: {:.2}\n", graph.metrics.cohesion_index));
        yaml.push_str(&format!("  cyclomatic_complexity: {}\n", graph.metrics.cyclomatic_complexity));
        yaml.push_str(&format!("  depth_levels: {}\n", graph.metrics.depth_levels));
        yaml.push_str("\n");
        
        // –°–ª–æ–∏
        yaml.push_str("layers:\n");
        for (layer_name, capsule_ids) in &graph.layers {
            yaml.push_str(&format!("  {}:\n", layer_name));
            yaml.push_str(&format!("    count: {}\n", capsule_ids.len()));
            yaml.push_str("    capsules:\n");
            for capsule_id in capsule_ids {
                if let Some(capsule) = graph.capsules.get(capsule_id) {
                    yaml.push_str(&format!("      - name: '{}'\n", capsule.name));
                    yaml.push_str(&format!("        type: '{:?}'\n", capsule.capsule_type));
                    yaml.push_str(&format!("        complexity: {}\n", capsule.complexity));
                    yaml.push_str(&format!("        path: '{}'\n", capsule.file_path.display()));
                }
            }
        }
        yaml.push_str("\n");
        
        // –°–≤—è–∑–∏
        yaml.push_str("relations:\n");
        for relation in &graph.relations {
            if let (Some(from_capsule), Some(to_capsule)) = 
                (graph.capsules.get(&relation.from_id), graph.capsules.get(&relation.to_id)) {
                yaml.push_str(&format!("  - from: '{}'\n", from_capsule.name));
                yaml.push_str(&format!("    to: '{}'\n", to_capsule.name));
                yaml.push_str(&format!("    type: '{:?}'\n", relation.relation_type));
                yaml.push_str(&format!("    strength: {:.2}\n", relation.strength));
                if let Some(desc) = &relation.description {
                    yaml.push_str(&format!("    description: '{}'\n", desc));
                }
            }
        }
        
        Ok(yaml)
    }
    
    pub fn export_to_mermaid(&self, graph: &CapsuleGraph) -> Result<String> {
        let mut mermaid = String::new();
        
        mermaid.push_str("graph TD\n");
        mermaid.push_str(&format!("    %% –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ ({} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)\n", graph.capsules.len()));
        mermaid.push_str("\n");
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞–ø—Å—É–ª
        mermaid.push_str("    %% –°—Ç–∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n");
        mermaid.push_str("    classDef moduleClass fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n");
        mermaid.push_str("    classDef functionClass fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n");
        mermaid.push_str("    classDef structClass fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px\n");
        mermaid.push_str("    classDef classClass fill:#fff3e0,stroke:#e65100,stroke-width:2px\n");
        mermaid.push_str("\n");
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–ª–æ—è–º
        for (layer_name, capsule_ids) in &graph.layers {
            mermaid.push_str(&format!("    subgraph \"–°–ª–æ–π: {}\"\n", layer_name));
            
            for capsule_id in capsule_ids {
                if let Some(capsule) = graph.capsules.get(capsule_id) {
                    let node_id = self.sanitize_node_id(&capsule.name);
                    let display_name = self.truncate_name(&capsule.name, 20);
                    
                    match capsule.capsule_type {
                        CapsuleType::Module => {
                            mermaid.push_str(&format!("        {}[\"üì¶ {}\"]\n", node_id, display_name));
                            mermaid.push_str(&format!("        {}:::moduleClass\n", node_id));
                        }
                        CapsuleType::Function | CapsuleType::Method => {
                            mermaid.push_str(&format!("        {}[\"‚öôÔ∏è {}\"]\n", node_id, display_name));
                            mermaid.push_str(&format!("        {}:::functionClass\n", node_id));
                        }
                        CapsuleType::Struct | CapsuleType::Enum => {
                            mermaid.push_str(&format!("        {}[\"üèóÔ∏è {}\"]\n", node_id, display_name));
                            mermaid.push_str(&format!("        {}:::structClass\n", node_id));
                        }
                        CapsuleType::Class | CapsuleType::Interface => {
                            mermaid.push_str(&format!("        {}[\"üéØ {}\"]\n", node_id, display_name));
                            mermaid.push_str(&format!("        {}:::classClass\n", node_id));
                        }
                        _ => {
                            mermaid.push_str(&format!("        {}[\"‚ö™ {}\"]\n", node_id, display_name));
                        }
                    }
                }
            }
            
            mermaid.push_str("    end\n\n");
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
        mermaid.push_str("    %% –°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏\n");
        for relation in &graph.relations {
            if let (Some(from_capsule), Some(to_capsule)) = 
                (graph.capsules.get(&relation.from_id), graph.capsules.get(&relation.to_id)) {
                
                let from_id = self.sanitize_node_id(&from_capsule.name);
                let to_id = self.sanitize_node_id(&to_capsule.name);
                
                let arrow_style = match relation.relation_type {
                    RelationType::Depends => "-->",
                    RelationType::Uses => "-.->",
                    RelationType::Implements => "==>",
                    RelationType::Extends => "===>",
                    RelationType::Aggregates => "--o",
                    RelationType::Composes => "-->",
                    RelationType::Calls => "-.->",
                    RelationType::References => "-.->",
                };
                
                let label = if relation.strength > 0.7 { "strong" } else if relation.strength > 0.4 { "medium" } else { "weak" };
                mermaid.push_str(&format!("    {} {}|{}| {}\n", from_id, arrow_style, label, to_id));
            }
        }
        
        Ok(mermaid)
    }
    
    pub fn export_to_dot(&self, graph: &CapsuleGraph) -> Result<String> {
        let mut dot = String::new();
        
        dot.push_str("digraph architecture {\n");
        dot.push_str("    rankdir=TB;\n");
        dot.push_str("    node [shape=box, style=filled];\n");
        dot.push_str("    edge [fontsize=10];\n\n");
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–æ–≤
        dot.push_str("    // –°—Ç–∏–ª–∏ —É–∑–ª–æ–≤\n");
        for capsule in graph.capsules.values() {
            let color = match capsule.capsule_type {
                CapsuleType::Module => "lightblue",
                CapsuleType::Function | CapsuleType::Method => "lightgreen",
                CapsuleType::Struct | CapsuleType::Enum => "lightyellow",
                CapsuleType::Class | CapsuleType::Interface => "lightcoral",
                _ => "lightgray",
            };
            
            let node_id = self.sanitize_node_id(&capsule.name);
            dot.push_str(&format!("    \"{}\" [fillcolor={}, label=\"{}\"];\n", 
                                 node_id, color, self.escape_label(&capsule.name)));
        }
        
        dot.push_str("\n    // –°–≤—è–∑–∏\n");
        for relation in &graph.relations {
            if let (Some(from_capsule), Some(to_capsule)) = 
                (graph.capsules.get(&relation.from_id), graph.capsules.get(&relation.to_id)) {
                
                let from_id = self.sanitize_node_id(&from_capsule.name);
                let to_id = self.sanitize_node_id(&to_capsule.name);
                
                let style = match relation.relation_type {
                    RelationType::Depends => "solid",
                    RelationType::Uses => "dashed",
                    RelationType::Implements => "bold",
                    _ => "dotted",
                };
                
                dot.push_str(&format!("    \"{}\" -> \"{}\" [style={}, label=\"{:.1}\"];\n", 
                                     from_id, to_id, style, relation.strength));
            }
        }
        
        dot.push_str("}\n");
        Ok(dot)
    }
    
    pub fn export_to_graphml(&self, graph: &CapsuleGraph) -> Result<String> {
        let mut graphml = String::new();
        
        graphml.push_str("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
        graphml.push_str("<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\">\n");
        graphml.push_str("  <key id=\"name\" for=\"node\" attr.name=\"name\" attr.type=\"string\"/>\n");
        graphml.push_str("  <key id=\"type\" for=\"node\" attr.name=\"type\" attr.type=\"string\"/>\n");
        graphml.push_str("  <key id=\"complexity\" for=\"node\" attr.name=\"complexity\" attr.type=\"int\"/>\n");
        graphml.push_str("  <key id=\"relation_type\" for=\"edge\" attr.name=\"relation_type\" attr.type=\"string\"/>\n");
        graphml.push_str("  <key id=\"strength\" for=\"edge\" attr.name=\"strength\" attr.type=\"double\"/>\n");
        graphml.push_str("  <graph id=\"architecture\" edgedefault=\"directed\">\n");
        
        // –£–∑–ª—ã
        for capsule in graph.capsules.values() {
            graphml.push_str(&format!("    <node id=\"{}\">\n", capsule.id));
            graphml.push_str(&format!("      <data key=\"name\">{}</data>\n", self.escape_xml(&capsule.name)));
            graphml.push_str(&format!("      <data key=\"type\">{:?}</data>\n", capsule.capsule_type));
            graphml.push_str(&format!("      <data key=\"complexity\">{}</data>\n", capsule.complexity));
            graphml.push_str("    </node>\n");
        }
        
        // –†–µ–±—Ä–∞
        for relation in &graph.relations {
            graphml.push_str(&format!("    <edge source=\"{}\" target=\"{}\">\n", 
                                     relation.from_id, relation.to_id));
            graphml.push_str(&format!("      <data key=\"relation_type\">{:?}</data>\n", relation.relation_type));
            graphml.push_str(&format!("      <data key=\"strength\">{}</data>\n", relation.strength));
            graphml.push_str("    </edge>\n");
        }
        
        graphml.push_str("  </graph>\n");
        graphml.push_str("</graphml>\n");
        Ok(graphml)
    }
    
    pub fn export_to_chain_of_thought(&self, graph: &CapsuleGraph) -> Result<String> {
        let mut cot = String::new();
        
        cot.push_str("# Chain of Thought: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n");
        
        cot.push_str("## üéØ –¶–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞\n");
        cot.push_str("–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è:\n");
        cot.push_str("- –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n");
        cot.push_str("- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞\n");
        cot.push_str("- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n\n");
        
        cot.push_str("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n");
        cot.push_str(&format!("- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤**: {}\n", graph.metrics.total_capsules));
        cot.push_str(&format!("- **–°–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏**: {}\n", graph.metrics.total_relations));
        cot.push_str(&format!("- **–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**: {:.2}\n", graph.metrics.complexity_average));
        cot.push_str(&format!("- **–ò–Ω–¥–µ–∫—Å —Å–≤—è–∑–Ω–æ—Å—Ç–∏**: {:.2}\n", graph.metrics.coupling_index));
        cot.push_str(&format!("- **–ò–Ω–¥–µ–∫—Å —Å–ø–ª–æ—á–µ–Ω–Ω–æ—Å—Ç–∏**: {:.2}\n", graph.metrics.cohesion_index));
        cot.push_str(&format!("- **–ì–ª—É–±–∏–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π**: {}\n", graph.metrics.depth_levels));
        cot.push_str("\n");
        
        cot.push_str("## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å–ª–æ–∏\n");
        for (layer_name, capsule_ids) in &graph.layers {
            cot.push_str(&format!("### –°–ª–æ–π: {}\n", layer_name));
            cot.push_str(&format!("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å–ª–æ–µ: {}\n\n", capsule_ids.len()));
            
            cot.push_str("**–ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**\n");
            for capsule_id in capsule_ids.iter().take(5) {
                if let Some(capsule) = graph.capsules.get(capsule_id) {
                    cot.push_str(&format!("- `{}` ({:?}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {})\n", 
                                         capsule.name, capsule.capsule_type, capsule.complexity));
                }
            }
            cot.push_str("\n");
        }
        
        cot.push_str("## üîó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏\n");
        let important_relations: Vec<_> = graph.relations.iter()
            .filter(|r| r.strength > 0.7)
            .collect();
        
        for relation in important_relations.iter().take(10) {
            if let (Some(from_capsule), Some(to_capsule)) = 
                (graph.capsules.get(&relation.from_id), graph.capsules.get(&relation.to_id)) {
                cot.push_str(&format!("- `{}` ‚Üí `{}` ({:?}, —Å–∏–ª–∞: {:.2})\n", 
                                     from_capsule.name, to_capsule.name, 
                                     relation.relation_type, relation.strength));
            }
        }
        cot.push_str("\n");
        
        cot.push_str("## üí° –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã\n");
        cot.push_str("1. **–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**: ");
        if graph.metrics.complexity_average > 15.0 {
            cot.push_str("–í—ã—Å–æ–∫–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥.\n");
        } else if graph.metrics.complexity_average > 8.0 {
            cot.push_str("–£–º–µ—Ä–µ–Ω–Ω–∞—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–æ—Å—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n");
        } else {
            cot.push_str("–ù–∏–∑–∫–∞—è. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n");
        }
        
        cot.push_str("2. **–°–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤**: ");
        if graph.metrics.coupling_index > 0.7 {
            cot.push_str("–í—ã—Å–æ–∫–∞—è. –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω–∞, —á—Ç–æ –º–æ–∂–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n");
        } else if graph.metrics.coupling_index > 0.4 {
            cot.push_str("–£–º–µ—Ä–µ–Ω–Ω–∞—è. –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å—é –∏ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å—é.\n");
        } else {
            cot.push_str("–ù–∏–∑–∫–∞—è. –•–æ—Ä–æ—à–∞—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.\n");
        }
        
        cot.push_str("3. **–°–ø–ª–æ—á–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π**: ");
        if graph.metrics.cohesion_index < 0.3 {
            cot.push_str("–ù–∏–∑–∫–∞—è. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–ª–∞–±–æ —Å–≤—è–∑–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.\n");
        } else if graph.metrics.cohesion_index < 0.6 {
            cot.push_str("–£–º–µ—Ä–µ–Ω–Ω–∞—è. –ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.\n");
        } else {
            cot.push_str("–í—ã—Å–æ–∫–∞—è. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã.\n");
        }
        
        Ok(cot)
    }
    
    pub fn export_to_llm_prompt(&self, graph: &CapsuleGraph) -> Result<String> {
        let mut prompt = String::new();
        
        prompt.push_str("# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è LLM\n\n");
        prompt.push_str("–¢—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è.\n\n");
        
        prompt.push_str("## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã\n");
        prompt.push_str(&format!("–°–∏—Å—Ç–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ {} —Å–ª–æ—ë–≤:\n\n", 
                                graph.metrics.total_capsules, graph.layers.len()));
        
        for (layer_name, capsule_ids) in &graph.layers {
            prompt.push_str(&format!("**{}** ({} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤):\n", layer_name, capsule_ids.len()));
            for capsule_id in capsule_ids.iter().take(3) {
                if let Some(capsule) = graph.capsules.get(capsule_id) {
                    prompt.push_str(&format!("- {}: {:?} (—Å–ª–æ–∂–Ω–æ—Å—Ç—å {})\n", 
                                           capsule.name, capsule.capsule_type, capsule.complexity));
                }
            }
            prompt.push_str("\n");
        }
        
        prompt.push_str("## –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞\n");
        prompt.push_str(&format!("- –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {:.2}\n", graph.metrics.complexity_average));
        prompt.push_str(&format!("- –°–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å: {:.2}\n", graph.metrics.coupling_index));
        prompt.push_str(&format!("- –°–ø–ª–æ—á–µ–Ω–Ω–æ—Å—Ç—å: {:.2}\n", graph.metrics.cohesion_index));
        prompt.push_str(&format!("- –ì–ª—É–±–∏–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {}\n", graph.metrics.depth_levels));
        prompt.push_str("\n");
        
        prompt.push_str("## –ó–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n");
        prompt.push_str("1. –û—Ü–µ–Ω–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n");
        prompt.push_str("2. –í—ã—è–≤–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n");
        prompt.push_str("3. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è\n");
        prompt.push_str("4. –û—Ü–µ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID\n");
        prompt.push_str("5. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É\n\n");
        
        prompt.push_str("## –ö–æ–Ω—Ç–µ–∫—Å—Ç\n");
        prompt.push_str("–≠—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏, ");
        prompt.push_str("–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. ");
        prompt.push_str("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3-5 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.\n\n");
        
        prompt.push_str("–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n");
        prompt.push_str("- –û—Ü–µ–Ω–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (1-10)\n");
        prompt.push_str("- 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n");
        prompt.push_str("- –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π\n");
        prompt.push_str("- –û—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤\n");
        
        Ok(prompt)
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    fn sanitize_node_id(&self, name: &str) -> String {
        name.chars()
            .map(|c| if c.is_alphanumeric() || c == '_' { c } else { '_' })
            .collect()
    }
    
    fn truncate_name(&self, name: &str, max_len: usize) -> String {
        if name.len() <= max_len {
            name.to_string()
        } else {
            format!("{}...", &name[..max_len-3])
        }
    }
    
    fn escape_label(&self, text: &str) -> String {
        text.replace("\"", "\\\"")
            .replace("\n", "\\n")
    }
    
    fn escape_xml(&self, text: &str) -> String {
        text.replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace("\"", "&quot;")
            .replace("'", "&apos;")
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è JSON —ç–∫—Å–ø–æ—Ä—Ç–∞
#[derive(serde::Serialize)]
struct JsonGraph {
    created_at: String,
    metrics: JsonMetrics,
    layers: std::collections::HashMap<String, Vec<JsonCapsule>>,
    relations: Vec<JsonRelation>,
}

#[derive(serde::Serialize)]
struct JsonMetrics {
    total_capsules: usize,
    total_relations: usize,
    complexity_average: f32,
    coupling_index: f32,
    cohesion_index: f32,
    cyclomatic_complexity: u32,
    depth_levels: u32,
}

#[derive(serde::Serialize)]
struct JsonCapsule {
    id: String,
    name: String,
    capsule_type: String,
    complexity: u32,
    file_path: String,
    warnings: Vec<String>,
}

#[derive(serde::Serialize)]
struct JsonRelation {
    from: String,
    to: String,
    relation_type: String,
    strength: f32,
    description: Option<String>,
}

impl JsonGraph {
    fn from_capsule_graph(graph: &CapsuleGraph) -> Self {
        let mut layers = std::collections::HashMap::new();
        
        for (layer_name, capsule_ids) in &graph.layers {
            let layer_capsules: Vec<JsonCapsule> = capsule_ids.iter()
                .filter_map(|id| graph.capsules.get(id))
                .map(|capsule| JsonCapsule {
                    id: capsule.id.to_string(),
                    name: capsule.name.clone(),
                    capsule_type: format!("{:?}", capsule.capsule_type),
                    complexity: capsule.complexity,
                    file_path: capsule.file_path.display().to_string(),
                    warnings: capsule.warnings.clone(),
                })
                .collect();
            layers.insert(layer_name.clone(), layer_capsules);
        }
        
        let relations: Vec<JsonRelation> = graph.relations.iter()
            .filter_map(|relation| {
                let from_name = graph.capsules.get(&relation.from_id)?.name.clone();
                let to_name = graph.capsules.get(&relation.to_id)?.name.clone();
                Some(JsonRelation {
                    from: from_name,
                    to: to_name,
                    relation_type: format!("{:?}", relation.relation_type),
                    strength: relation.strength,
                    description: relation.description.clone(),
                })
            })
            .collect();
        
        Self {
            created_at: graph.created_at.format("%Y-%m-%d %H:%M:%S UTC").to_string(),
            metrics: JsonMetrics {
                total_capsules: graph.metrics.total_capsules,
                total_relations: graph.metrics.total_relations,
                complexity_average: graph.metrics.complexity_average,
                coupling_index: graph.metrics.coupling_index,
                cohesion_index: graph.metrics.cohesion_index,
                cyclomatic_complexity: graph.metrics.cyclomatic_complexity,
                depth_levels: graph.metrics.depth_levels,
            },
            layers,
            relations,
        }
    }
}

impl Default for Exporter {
    fn default() -> Self {
        Self::new()
    }
} 