#[cfg(test)]
mod tests {
    use crate::core::*;
    use crate::file_scanner::FileScanner;
    use crate::capsule_graph_builder::CapsuleGraphBuilder;
    use crate::capsule_enricher::CapsuleEnricher;
    use crate::validator_optimizer::ValidatorOptimizer;
    use crate::exporter::Exporter;
    use std::path::PathBuf;

    #[test]
    fn test_file_scanner() {
        let scanner = FileScanner::new(
            vec!["**/*.rs".to_string()],
            vec!["**/target/**".to_string()],
            Some(3)
        ).expect("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å FileScanner");
        
        let current_dir = std::env::current_dir().unwrap();
        
        match scanner.scan_project(&current_dir) {
            Ok(files) => {
                println!("‚úÖ FileScanner —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {} —Ñ–∞–π–ª–æ–≤", files.len());
                assert!(!files.is_empty());
            }
            Err(e) => {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ FileScanner: {}", e);
            }
        }
    }

    #[test]
    fn test_capsule_graph_builder() {
        let builder = CapsuleGraphBuilder::new();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞–ø—Å—É–ª—É
        let test_capsule = Capsule {
            id: uuid::Uuid::new_v4(),
            name: "TestCapsule".to_string(),
            capsule_type: CapsuleType::Function,
            file_path: PathBuf::from("test.rs"),
            line_start: 1,
            line_end: 10,
            complexity: 5,
            priority: Priority::Medium,
            status: CapsuleStatus::Active,
            dependencies: vec![],
            dependents: vec![],
            layer: Some("Core".to_string()),
            summary: None,
            slogan: None,
            warnings: vec![],
            metadata: std::collections::HashMap::new(),
            created_at: chrono::Utc::now(),
        };
        
        let capsules = vec![test_capsule];
        
        match builder.build_graph(&capsules) {
            Ok(graph) => {
                println!("‚úÖ CapsuleGraphBuilder —Ä–∞–±–æ—Ç–∞–µ—Ç: {} –∫–∞–ø—Å—É–ª, {} —Å–≤—è–∑–µ–π", 
                         graph.capsules.len(), graph.relations.len());
                assert_eq!(graph.capsules.len(), 1);
            }
            Err(e) => {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ CapsuleGraphBuilder: {}", e);
                panic!("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {}", e);
            }
        }
    }

    #[test]
    fn test_capsule_enricher() {
        let enricher = CapsuleEnricher::new();
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        let test_capsule = Capsule {
            id: uuid::Uuid::new_v4(),
            name: "TestCapsule".to_string(),
            capsule_type: CapsuleType::Function,
            file_path: PathBuf::from("src/lib.rs"), // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            line_start: 1,
            line_end: 10,
            complexity: 5,
            priority: Priority::Medium,
            status: CapsuleStatus::Active,
            dependencies: vec![],
            dependents: vec![],
            layer: Some("Core".to_string()),
            summary: None,
            slogan: None,
            warnings: vec![],
            metadata: std::collections::HashMap::new(),
            created_at: chrono::Utc::now(),
        };
        
        let mut capsules = std::collections::HashMap::new();
        capsules.insert(test_capsule.id, test_capsule);
        
        let graph = CapsuleGraph {
            capsules,
            relations: vec![],
            layers: std::collections::HashMap::new(),
            metrics: GraphMetrics {
                total_capsules: 1,
                total_relations: 0,
                complexity_average: 5.0,
                coupling_index: 0.0,
                cohesion_index: 1.0,
                cyclomatic_complexity: 1,
                depth_levels: 1,
            },
            created_at: chrono::Utc::now(),
        };
        
        match enricher.enrich_graph(&graph) {
            Ok(enriched_graph) => {
                println!("‚úÖ CapsuleEnricher —Ä–∞–±–æ—Ç–∞–µ—Ç: {} –∫–∞–ø—Å—É–ª –æ–±–æ–≥–∞—â–µ–Ω–æ", 
                         enriched_graph.capsules.len());
                assert_eq!(enriched_graph.capsules.len(), 1);
            }
            Err(e) => {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ CapsuleEnricher: {}", e);
            }
        }
    }

    #[test]
    fn test_validator_optimizer() {
        let validator = ValidatorOptimizer::new();
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        let test_capsule = Capsule {
            id: uuid::Uuid::new_v4(),
            name: "TestCapsule".to_string(),
            capsule_type: CapsuleType::Function,
            file_path: PathBuf::from("test.rs"),
            line_start: 1,
            line_end: 10,
            complexity: 5,
            priority: Priority::Medium,
            status: CapsuleStatus::Active,
            dependencies: vec![],
            dependents: vec![],
            layer: Some("Core".to_string()),
            summary: None,
            slogan: None,
            warnings: vec![],
            metadata: std::collections::HashMap::new(),
            created_at: chrono::Utc::now(),
        };
        
        let mut capsules = std::collections::HashMap::new();
        capsules.insert(test_capsule.id, test_capsule);
        
        let graph = CapsuleGraph {
            capsules,
            relations: vec![],
            layers: std::collections::HashMap::new(),
            metrics: GraphMetrics {
                total_capsules: 1,
                total_relations: 0,
                complexity_average: 5.0,
                coupling_index: 0.3,
                cohesion_index: 0.7,
                cyclomatic_complexity: 1,
                depth_levels: 1,
            },
            created_at: chrono::Utc::now(),
        };
        
        match validator.validate_and_optimize(&graph) {
            Ok(validated_graph) => {
                println!("‚úÖ ValidatorOptimizer —Ä–∞–±–æ—Ç–∞–µ—Ç: –≥—Ä–∞—Ñ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω");
                assert_eq!(validated_graph.capsules.len(), 1);
            }
            Err(e) => {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ ValidatorOptimizer: {}", e);
            }
        }
    }

    #[test]
    fn test_exporter() {
        let exporter = Exporter::new();
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        let test_capsule = Capsule {
            id: uuid::Uuid::new_v4(),
            name: "TestCapsule".to_string(),
            capsule_type: CapsuleType::Function,
            file_path: PathBuf::from("test.rs"),
            line_start: 1,
            line_end: 10,
            complexity: 5,
            priority: Priority::Medium,
            status: CapsuleStatus::Active,
            dependencies: vec![],
            dependents: vec![],
            layer: Some("Core".to_string()),
            summary: Some("–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–ø—Å—É–ª–∞".to_string()),
            slogan: None,
            warnings: vec![],
            metadata: std::collections::HashMap::new(),
            created_at: chrono::Utc::now(),
        };
        
        let mut capsules = std::collections::HashMap::new();
        capsules.insert(test_capsule.id, test_capsule);
        
        let graph = CapsuleGraph {
            capsules,
            relations: vec![],
            layers: std::collections::HashMap::new(),
            metrics: GraphMetrics {
                total_capsules: 1,
                total_relations: 0,
                complexity_average: 5.0,
                coupling_index: 0.3,
                cohesion_index: 0.7,
                cyclomatic_complexity: 1,
                depth_levels: 1,
            },
            created_at: chrono::Utc::now(),
        };
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —ç–∫—Å–ø–æ—Ä—Ç
        match exporter.export_to_json(&graph) {
            Ok(json) => {
                println!("‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {} —Å–∏–º–≤–æ–ª–æ–≤", json.len());
                assert!(json.contains("TestCapsule"));
            }
            Err(e) => {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON —ç–∫—Å–ø–æ—Ä—Ç–∞: {}", e);
            }
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º Mermaid —ç–∫—Å–ø–æ—Ä—Ç
        match exporter.export_to_mermaid(&graph) {
            Ok(mermaid) => {
                println!("‚úÖ Mermaid —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {} —Å–∏–º–≤–æ–ª–æ–≤", mermaid.len());
                assert!(mermaid.contains("graph TD"));
            }
            Err(e) => {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ Mermaid —ç–∫—Å–ø–æ—Ä—Ç–∞: {}", e);
            }
        }
    }

    #[test]
    fn test_full_pipeline() {
        println!("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞...");
        
        // 1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        let scanner = FileScanner::new(
            vec!["**/*.rs".to_string()],
            vec!["**/target/**".to_string()],
            Some(3)
        ).expect("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å FileScanner");
        
        let current_dir = std::env::current_dir().unwrap();
        let files = scanner.scan_project(&current_dir).unwrap_or_else(|_| vec![]);
        println!("üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {}", files.len());
        
        if files.is_empty() {
            println!("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ");
        }
        
        // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–ø—Å—É–ª
        let mut capsules = Vec::new();
        for i in 0..3 {
            let capsule = Capsule {
                id: uuid::Uuid::new_v4(),
                name: format!("TestModule{}", i),
                capsule_type: CapsuleType::Module,
                file_path: PathBuf::from(format!("test{}.rs", i)),
                line_start: 1,
                line_end: 50,
                complexity: 5 + i as u32,
                priority: Priority::Medium,
                status: CapsuleStatus::Active,
                dependencies: vec![],
                dependents: vec![],
                layer: Some("Core".to_string()),
                summary: Some(format!("–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å {}", i)),
                slogan: None,
                warnings: vec![],
                metadata: std::collections::HashMap::new(),
                created_at: chrono::Utc::now(),
            };
            capsules.push(capsule);
        }
        
        // 3. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
        let builder = CapsuleGraphBuilder::new();
        let graph = builder.build_graph(&capsules).expect("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞");
        println!("üîó –ì—Ä–∞—Ñ –ø–æ—Å—Ç—Ä–æ–µ–Ω: {} —É–∑–ª–æ–≤, {} —Å–≤—è–∑–µ–π", 
                 graph.capsules.len(), graph.relations.len());
        
        // 4. –û–±–æ–≥–∞—â–µ–Ω–∏–µ
        let enricher = CapsuleEnricher::new();
        let enriched_graph = enricher.enrich_graph(&graph).expect("–û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è");
        println!("‚ú® –ì—Ä–∞—Ñ –æ–±–æ–≥–∞—â–µ–Ω");
        
        // 5. –í–∞–ª–∏–¥–∞—Ü–∏—è
        let validator = ValidatorOptimizer::new();
        let validated_graph = validator.validate_and_optimize(&enriched_graph).expect("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        println!("‚úÖ –ì—Ä–∞—Ñ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω");
        
        // 6. –≠–∫—Å–ø–æ—Ä—Ç
        let exporter = Exporter::new();
        let json = exporter.export_to_json(&validated_graph).expect("–û—à–∏–±–∫–∞ JSON —ç–∫—Å–ø–æ—Ä—Ç–∞");
        let mermaid = exporter.export_to_mermaid(&validated_graph).expect("–û—à–∏–±–∫–∞ Mermaid —ç–∫—Å–ø–æ—Ä—Ç–∞");
        
        println!("üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:");
        println!("  - JSON: {} —Å–∏–º–≤–æ–ª–æ–≤", json.len());
        println!("  - Mermaid: {} —Å–∏–º–≤–æ–ª–æ–≤", mermaid.len());
        
        println!("üéâ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–ø —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    }

    #[test] 
    fn test_json_serialization() {
        println!("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏...");
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ
        let test_capsule = Capsule {
            id: uuid::Uuid::new_v4(),
            name: "TestCapsule".to_string(),
            capsule_type: CapsuleType::Function,
            file_path: PathBuf::from("test.rs"),
            line_start: 1,
            line_end: 10,
            complexity: 5,
            priority: Priority::Medium,
            status: CapsuleStatus::Active,
            dependencies: vec![],
            dependents: vec![],
            layer: Some("Core".to_string()),
            summary: Some("–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–ø—Å—É–ª–∞".to_string()),
            slogan: None,
            warnings: vec![],
            metadata: std::collections::HashMap::new(),
            created_at: chrono::Utc::now(),
        };
        
        let mut capsules = std::collections::HashMap::new();
        capsules.insert(test_capsule.id, test_capsule);
        
        let graph = CapsuleGraph {
            capsules,
            relations: vec![],
            layers: std::collections::HashMap::new(),
            metrics: GraphMetrics {
                total_capsules: 1,
                total_relations: 0,
                complexity_average: 5.0,
                coupling_index: 0.3,
                cohesion_index: 0.7,
                cyclomatic_complexity: 1,
                depth_levels: 1,
            },
            created_at: chrono::Utc::now(),
        };
        
        // –°–æ–∑–¥–∞–µ–º AnalysisResult
        let analysis_result = crate::core::AnalysisResult {
            graph,
            warnings: vec![],
            recommendations: vec![
                "–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è".to_string(),
            ],
            export_formats: vec![crate::core::ExportFormat::Json],
        };
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        let json_result = serde_json::to_string(&analysis_result);
        match json_result {
            Ok(json) => {
                println!("‚úÖ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {} —Å–∏–º–≤–æ–ª–æ–≤", json.len());
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ JSON —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                assert!(json.contains("graph"));
                assert!(json.contains("metrics"));
                assert!(json.contains("total_capsules"));
                assert!(json.contains("TestCapsule"));
                
                // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
                let parsed: std::result::Result<crate::core::AnalysisResult, serde_json::Error> = serde_json::from_str(&json);
                match parsed {
                    Ok(parsed_result) => {
                        println!("‚úÖ JSON –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç");
                        assert_eq!(parsed_result.graph.capsules.len(), 1);
                        assert_eq!(parsed_result.graph.metrics.total_capsules, 1);
                    }
                    Err(e) => {
                        println!("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e);
                        panic!("JSON –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
                    }
                }
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e);
                panic!("JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
            }
        }
        
        println!("üéâ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    }
} 