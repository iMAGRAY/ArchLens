use std::path::Path;
use crate::types::*;

#[derive(Debug)]
pub enum CliCommand {
    Analyze { project_path: String },
    Export { project_path: String, format: String, output: Option<String> },
    Structure { project_path: String },
    Diagram { project_path: String, diagram_type: String, output: Option<String> },
    Help,
}

pub async fn handle_command(command: CliCommand) -> std::result::Result<(), Box<dyn std::error::Error>> {
    use super::{stats, export, diagram};
    
    match command {
        CliCommand::Help => {
            print_help();
        },
        CliCommand::Analyze { project_path } => {
            println!("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: {}", project_path);
            
            if !Path::new(&project_path).exists() {
                eprintln!("‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", project_path);
                std::process::exit(1);
            }
            
            match stats::get_project_stats(&project_path) {
                Ok(stats) => {
                    println!("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                    println!("{}", serde_json::to_string_pretty(&stats)?);
                },
                Err(err) => {
                    eprintln!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", err);
                    std::process::exit(1);
                }
            }
        },
        CliCommand::Export { project_path, format, output } => {
            println!("üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞: {} –≤ —Ñ–æ—Ä–º–∞—Ç: {}", project_path, format);
            
            match format.as_str() {
                "ai_compact" => {
                    match export::generate_ai_compact(&project_path) {
                        Ok(content) => {
                            if let Some(output_file) = output {
                                std::fs::write(&output_file, &content)?;
                                println!("‚úÖ AI Compact –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", output_file);
                            } else {
                                println!("{}", content);
                            }
                        },
                        Err(err) => {
                            eprintln!("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {}", err);
                            std::process::exit(1);
                        }
                    }
                },
                _ => {
                    eprintln!("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {}", format);
                    eprintln!("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ai_compact");
                    std::process::exit(1);
                }
            }
        },
        CliCommand::Structure { project_path } => {
            println!("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: {}", project_path);
            
            match stats::get_project_structure(&project_path) {
                Ok(structure) => {
                    println!("{}", serde_json::to_string_pretty(&structure)?);
                },
                Err(err) => {
                    eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {}", err);
                    std::process::exit(1);
                }
            }
        },
        CliCommand::Diagram { project_path, diagram_type, output } => {
            println!("üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: {} —Ç–∏–ø–∞: {}", project_path, diagram_type);
            
            match diagram_type.as_str() {
                "mermaid" => {
                    match diagram::generate_mermaid_diagram(&project_path) {
                        Ok(content) => {
                            let output_path = output.unwrap_or_else(|| "diagram.mmd".to_string());
                            std::fs::write(&output_path, content)?;
                            println!("‚úÖ Mermaid –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {}", output_path);
                        },
                        Err(err) => {
                            eprintln!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {}", err);
                            std::process::exit(1);
                        }
                    }
                },
                _ => {
                    eprintln!("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã: {}", diagram_type);
                    eprintln!("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: mermaid");
                    std::process::exit(1);
                }
            }
        }
    }
    
    Ok(())
}

fn print_help() {
    println!("üèóÔ∏è ArchLens - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–æ–¥–∞");
    println!();
    println!("–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:");
    println!("  archlens <–ö–û–ú–ê–ù–î–ê> [–û–ü–¶–ò–ò]");
    println!();
    println!("–ö–û–ú–ê–ù–î–´:");
    println!("  analyze <path>                 –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞");
    println!("  export <path> <format> [out]   –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
    println!("  structure <path>               –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞");
    println!("  diagram <path> <type> [out]    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã");
    println!("  help                           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
    println!();
    println!("–§–û–†–ú–ê–¢–´ –≠–ö–°–ü–û–†–¢–ê:");
    println!("  ai_compact    –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è AI (~2800 —Ç–æ–∫–µ–Ω–æ–≤)");
    println!();
    println!("–¢–ò–ü–´ –î–ò–ê–ì–†–ê–ú–ú:");
    println!("  mermaid       Mermaid –¥–∏–∞–≥—Ä–∞–º–º–∞");
    println!();
    println!("–ü–†–ò–ú–ï–†–´:");
    println!("  archlens analyze /path/to/project");
    println!("  archlens export /path/to/project ai_compact analysis.txt");
    println!("  archlens diagram /path/to/project mermaid diagram.mmd");
    println!("  archlens structure /path/to/project");
} 