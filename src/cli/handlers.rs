use std::path::Path;
use crate::types::*;

use super::parser;

pub async fn handle_command(command: parser::CliCommand) -> std::result::Result<(), Box<dyn std::error::Error>> {
    use super::{stats, export, diagram};
    
    match command {
        parser::CliCommand::Help => {
            print_help();
        },
        parser::CliCommand::Version => {
            println!("archlens v{}", env!("CARGO_PKG_VERSION"));
        },
        parser::CliCommand::Analyze { project_path, verbose: _verbose, include_tests: _include_tests, deep } => {
            eprintln!("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: {}{}", project_path, if deep { " (deep)" } else { "" });
            if !Path::new(&project_path).exists() {
                eprintln!("‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", project_path);
                std::process::exit(1);
            }
            if deep {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Tauri-–∫–æ–º–∞–Ω–¥—É –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
                match crate::commands::analyze_project_advanced(project_path.clone(), None, crate::commands::AppState::default().into()).await {
                    Ok(json) => { println!("{}", json); },
                    Err(err) => {
                        eprintln!("‚ö†Ô∏è –û—à–∏–±–∫–∞ deep-–∞–Ω–∞–ª–∏–∑–∞: {}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.", err);
                        match stats::get_project_stats(&project_path) {
                            Ok(s) => println!("{}", serde_json::to_string_pretty(&s)?),
                            Err(e) => { eprintln!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", e); std::process::exit(1); }
                        }
                    }
                }
            } else {
                match stats::get_project_stats(&project_path) {
                    Ok(stats) => { eprintln!("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"); println!("{}", serde_json::to_string_pretty(&stats)?); },
                    Err(err) => { eprintln!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", err); std::process::exit(1); }
                }
            }
        },
        parser::CliCommand::Export { project_path, format, output, options: _options } => {
            eprintln!("üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞: {} –≤ —Ñ–æ—Ä–º–∞—Ç: {:?}", project_path, format);
            match format {
                parser::ExportFormat::AiCompact => {
                    match export::generate_ai_compact(&project_path) {
                        Ok(content) => {
                            if let Some(output_file) = output {
                                std::fs::write(&output_file, &content)?;
                                eprintln!("‚úÖ AI Compact –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", output_file);
                            } else {
                                println!("{}", content);
                            }
                        },
                        Err(err) => { eprintln!("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {}", err); std::process::exit(1); }
                    }
                },
                parser::ExportFormat::Json | parser::ExportFormat::Markdown | parser::ExportFormat::Html => {
                    eprintln!("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {:?}", format);
                    eprintln!("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ai_compact");
                    std::process::exit(1);
                }
            }
        },
        parser::CliCommand::Structure { project_path, .. } => {
            eprintln!("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: {}", project_path);
            match stats::get_project_structure(&project_path) {
                Ok(structure) => { println!("{}", serde_json::to_string_pretty(&structure)?); },
                Err(err) => { eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {}", err); std::process::exit(1); }
            }
        },
        parser::CliCommand::Diagram { project_path, diagram_type, output, include_metrics: _ } => {
            eprintln!("üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: {} —Ç–∏–ø–∞: {:?}", project_path, diagram_type);
            let diag_type = match diagram_type { parser::DiagramType::Mermaid => "mermaid", parser::DiagramType::Dot => "dot", parser::DiagramType::Svg => "svg" };
            match diag_type {
                "mermaid" => {
                    // –£–ª—É—á—à–∏–º: –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –¥–µ—Ä–Ω—É—Ç—å Exporter::export_to_mermaid –ø–æ –≥—Ä–∞—Ñ—É; –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    match diagram::generate_mermaid_diagram(&project_path) {
                        Ok(content) => { if let Some(out) = output { std::fs::write(&out, &content)?; eprintln!("‚úÖ Mermaid –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {}", out); } else { println!("{}", content); } },
                        Err(err) => { eprintln!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {}", err); std::process::exit(1); }
                    }
                },
                _ => { eprintln!("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã: {}", diag_type); eprintln!("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: mermaid"); std::process::exit(1); }
            }
        }
    }
    Ok(())
}

pub fn print_help() {
    println!("üèóÔ∏è ArchLens - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–æ–¥–∞");
    println!();
    println!("–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:");
    println!("  archlens <–ö–û–ú–ê–ù–î–ê> [–û–ü–¶–ò–ò]");
    println!();
    println!("–ö–û–ú–ê–ù–î–´:");
    println!("  analyze <path> [--verbose] [--include-tests] [--deep]  –ê–Ω–∞–ª–∏–∑ (deep ‚Äî –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω)");
    println!("  export <path> <format> [--output <file>]               –≠–∫—Å–ø–æ—Ä—Ç (ai_compact)");
    println!("  structure <path> [--max-depth N] [--show-metrics]      –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞");
    println!("  diagram <path> <type> [--output <file>]               –î–∏–∞–≥—Ä–∞–º–º–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã");
    println!("  version                                               –ü–µ—á–∞—Ç—å –≤–µ—Ä—Å–∏–∏");
    println!("  help                                                  –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
} 