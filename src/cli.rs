use std::env;
use std::path::Path;
use serde_json;
use chrono;
use uuid;
use crate::types::*;

#[derive(Debug)]
pub enum CliCommand {
    Analyze { project_path: String },
    Export { project_path: String, format: String, output: Option<String> },
    Structure { project_path: String },
    Diagram { project_path: String, diagram_type: String, output: Option<String> },
    Help,
}

pub fn parse_args() -> std::result::Result<CliCommand, String> {
    let args: Vec<String> = env::args().collect();
    
    if args.len() < 2 {
        return Ok(CliCommand::Help);
    }
    
    match args[1].as_str() {
        "analyze" => {
            if args.len() < 3 {
                return Err("Usage: archlens analyze <project_path>".to_string());
            }
            Ok(CliCommand::Analyze {
                project_path: args[2].clone()
            })
        },
        "export" => {
            if args.len() < 4 {
                return Err("Usage: archlens export <project_path> <format> [output_file]".to_string());
            }
            Ok(CliCommand::Export {
                project_path: args[2].clone(),
                format: args[3].clone(),
                output: args.get(4).cloned(),
            })
        },
        "structure" => {
            if args.len() < 3 {
                return Err("Usage: archlens structure <project_path>".to_string());
            }
            Ok(CliCommand::Structure {
                project_path: args[2].clone()
            })
        },
        "diagram" => {
            if args.len() < 4 {
                return Err("Usage: archlens diagram <project_path> <type> [output_file]".to_string());
            }
            Ok(CliCommand::Diagram {
                project_path: args[2].clone(),
                diagram_type: args[3].clone(),
                output: args.get(4).cloned(),
            })
        },
        "help" | "--help" | "-h" => Ok(CliCommand::Help),
        _ => Err(format!("Unknown command: {}", args[1])),
    }
}

pub async fn run_cli() -> std::result::Result<(), Box<dyn std::error::Error>> {
    let command = match parse_args() {
        Ok(cmd) => cmd,
        Err(err) => {
            eprintln!("Error: {}", err);
            print_help();
            std::process::exit(1);
        }
    };
    
    match command {
        CliCommand::Help => {
            print_help();
        },
        CliCommand::Analyze { project_path } => {
            println!("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: {}", project_path);
            
            if !Path::new(&project_path).exists() {
                eprintln!("‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", project_path);
                std::process::exit(1);
            }
            
            // –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            match get_project_stats(&project_path) {
                Ok(stats) => {
                    println!("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                    println!("{}", serde_json::to_string_pretty(&stats)?);
                },
                Err(err) => {
                    eprintln!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", err);
                    std::process::exit(1);
                }
            }
        },
        CliCommand::Export { project_path, format, output } => {
            println!("üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞: {} –≤ —Ñ–æ—Ä–º–∞—Ç: {}", project_path, format);
            
            match format.as_str() {
                "ai_compact" => {
                    match generate_ai_compact(&project_path) {
                        Ok(content) => {
                            if let Some(output_file) = output {
                                std::fs::write(&output_file, &content)?;
                                println!("‚úÖ AI Compact –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", output_file);
                            } else {
                                println!("{}", content);
                            }
                        },
                        Err(err) => {
                            eprintln!("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {}", err);
                            std::process::exit(1);
                        }
                    }
                },
                _ => {
                    eprintln!("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {}", format);
                    eprintln!("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ai_compact");
                    std::process::exit(1);
                }
            }
        },
        CliCommand::Structure { project_path } => {
            println!("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: {}", project_path);
            
            match get_project_structure(&project_path) {
                Ok(structure) => {
                    println!("{}", serde_json::to_string_pretty(&structure)?);
                },
                Err(err) => {
                    eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {}", err);
                    std::process::exit(1);
                }
            }
        },
        CliCommand::Diagram { project_path, diagram_type, output } => {
            println!("üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: {} —Ç–∏–ø–∞: {}", project_path, diagram_type);
            
            match diagram_type.as_str() {
                "mermaid" => {
                    match generate_mermaid_diagram(&project_path) {
                        Ok(content) => {
                            let output_path = output.unwrap_or_else(|| "diagram.mmd".to_string());
                            std::fs::write(&output_path, content)?;
                            println!("‚úÖ Mermaid –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {}", output_path);
                        },
                        Err(err) => {
                            eprintln!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {}", err);
                            std::process::exit(1);
                        }
                    }
                },
                _ => {
                    eprintln!("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã: {}", diagram_type);
                    eprintln!("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: mermaid");
                    std::process::exit(1);
                }
            }
        }
    }
    
    Ok(())
}

fn print_help() {
    println!("üèóÔ∏è ArchLens - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–æ–¥–∞");
    println!();
    println!("–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:");
    println!("  archlens <–ö–û–ú–ê–ù–î–ê> [–û–ü–¶–ò–ò]");
    println!();
    println!("–ö–û–ú–ê–ù–î–´:");
    println!("  analyze <path>                 –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞");
    println!("  export <path> <format> [out]   –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
    println!("  structure <path>               –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞");
    println!("  diagram <path> <type> [out]    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã");
    println!("  help                           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
    println!();
    println!("–§–û–†–ú–ê–¢–´ –≠–ö–°–ü–û–†–¢–ê:");
    println!("  ai_compact    –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è AI (~2800 —Ç–æ–∫–µ–Ω–æ–≤)");
    println!();
    println!("–¢–ò–ü–´ –î–ò–ê–ì–†–ê–ú–ú:");
    println!("  mermaid       Mermaid –¥–∏–∞–≥—Ä–∞–º–º–∞");
    println!();
    println!("–ü–†–ò–ú–ï–†–´:");
    println!("  archlens analyze /path/to/project");
    println!("  archlens export /path/to/project ai_compact analysis.txt");
    println!("  archlens diagram /path/to/project mermaid diagram.mmd");
    println!("  archlens structure /path/to/project");
}

// –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è CLI
fn get_project_stats(project_path: &str) -> std::result::Result<ProjectStats, String> {
    use std::fs;
    use std::collections::HashMap;
    
    if !Path::new(project_path).exists() {
        return Err("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç".to_string());
    }
    
    let mut file_types = HashMap::new();
    let mut total_files = 0;
    let mut total_lines = 0;
    
    fn scan_directory(dir: &Path, file_types: &mut HashMap<String, usize>, 
                      total_files: &mut usize, total_lines: &mut usize) -> std::result::Result<(), std::io::Error> {
        for entry in fs::read_dir(dir)? {
            let entry = entry?;
            let path = entry.path();
            
            if path.is_dir() {
                if let Some(name) = path.file_name() {
                    if !name.to_string_lossy().starts_with('.') 
                       && name != "node_modules" 
                       && name != "target" {
                        scan_directory(&path, file_types, total_files, total_lines)?;
                    }
                }
            } else {
                *total_files += 1;
                
                let extension = path.extension()
                    .map(|ext| format!(".{}", ext.to_string_lossy()))
                    .unwrap_or_else(|| "".to_string());
                
                *file_types.entry(extension.clone()).or_insert(0) += 1;
                
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                if matches!(extension.as_str(), ".rs" | ".js" | ".ts" | ".py" | ".java" | ".cpp" | ".c" | ".h") {
                    if let Ok(content) = fs::read_to_string(&path) {
                        *total_lines += content.lines().count();
                    }
                }
            }
        }
        Ok(())
    }
    
    let root_path = Path::new(project_path);
    scan_directory(root_path, &mut file_types, &mut total_files, &mut total_lines)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e))?;
    
    Ok(ProjectStats {
        total_files,
        total_lines,
        file_types,
        project_path: project_path.to_string(),
        scanned_at: chrono::Utc::now().to_rfc3339(),
    })
}

fn get_project_structure(project_path: &str) -> std::result::Result<ProjectStructure, String> {
    use std::fs;
    use std::collections::HashMap;
    
    if !Path::new(project_path).exists() {
        return Err("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç".to_string());
    }
    
    let mut file_types = HashMap::new();
    let mut total_files = 0;
    let mut files = Vec::new();
    
    fn scan_directory(dir: &Path, file_types: &mut HashMap<String, usize>, 
                      total_files: &mut usize, files: &mut Vec<FileInfo>, 
                      root_path: &Path, depth: usize) -> std::result::Result<(), std::io::Error> {
        if depth > 10 { return Ok(()); }
        
        for entry in fs::read_dir(dir)? {
            let entry = entry?;
            let path = entry.path();
            
            if path.is_dir() {
                if let Some(name) = path.file_name() {
                    if !name.to_string_lossy().starts_with('.') 
                       && name != "node_modules" 
                       && name != "target" {
                        scan_directory(&path, file_types, total_files, files, root_path, depth + 1)?;
                    }
                }
            } else {
                *total_files += 1;
                
                let extension = path.extension()
                    .map(|ext| format!(".{}", ext.to_string_lossy()))
                    .unwrap_or_else(|| "".to_string());
                
                *file_types.entry(extension.clone()).or_insert(0) += 1;
                
                if files.len() < 100 {
                    let relative_path = path.strip_prefix(root_path)
                        .unwrap_or(&path)
                        .to_string_lossy()
                        .to_string();
                    
                    files.push(FileInfo {
                        path: relative_path,
                        name: path.file_name()
                            .unwrap_or_default()
                            .to_string_lossy()
                            .to_string(),
                        extension,
                        size: entry.metadata()?.len(),
                    });
                }
            }
        }
        Ok(())
    }
    
    let root_path = Path::new(project_path);
    scan_directory(root_path, &mut file_types, &mut total_files, &mut files, root_path, 0)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e))?;
    
    let layers = vec!["src".to_string()];
    
    Ok(ProjectStructure {
        total_files,
        file_types,
        layers,
        files,
    })
}

fn generate_ai_compact(project_path: &str) -> std::result::Result<String, String> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    use crate::types::*;
    use crate::file_scanner::FileScanner;
    use crate::exporter::Exporter;
    use crate::capsule_graph_builder::CapsuleGraphBuilder;
    use crate::capsule_enricher::CapsuleEnricher;
    use crate::validator_optimizer::ValidatorOptimizer;
    use std::path::PathBuf;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
    let config = AnalysisConfig {
        project_path: PathBuf::from(project_path),
        include_patterns: vec![
            "**/*.rs".to_string(), 
            "**/*.ts".to_string(), 
            "**/*.js".to_string(), 
            "**/*.py".to_string(),
            "**/*.tsx".to_string(),
            "**/*.jsx".to_string(),
            "**/*.java".to_string(),
            "**/*.cpp".to_string(),
            "**/*.c".to_string(),
            "**/*.go".to_string(),
        ],
        exclude_patterns: vec![
            "**/target/**".to_string(), 
            "**/node_modules/**".to_string(), 
            "**/.git/**".to_string(),
            "**/dist/**".to_string(),
            "**/build/**".to_string(),
            "**/.next/**".to_string(),
            "**/coverage/**".to_string(),
        ],
        max_depth: Some(10),
        follow_symlinks: false,
        analyze_dependencies: true,
        extract_comments: true,
        parse_tests: false,
        experimental_features: false,
        generate_summaries: true,
        languages: vec![
            FileType::Rust, 
            FileType::TypeScript, 
            FileType::JavaScript, 
            FileType::Python,
            FileType::Java,
            FileType::Go,
            FileType::Cpp,
            FileType::C,
        ],
    };

    // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    let scanner = FileScanner::new(
        config.include_patterns.clone(),
        config.exclude_patterns.clone(),
        config.max_depth.map(|d| d as usize),
    ).map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞: {e}"))?;

    let files = scanner.scan_project(&config.project_path)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"))?;

    // –°–æ–∑–¥–∞–µ–º –∫–∞–ø—Å—É–ª—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    let mut capsules = std::collections::HashMap::new();
    let mut layers = std::collections::HashMap::new();
    
    if files.is_empty() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—É—Å—Ç
        return Ok(format!(
            "# üèóÔ∏è ArchLens AI Compact Analysis\n\nüìÅ –ü—Ä–æ–µ–∫—Ç: {}\n‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –ü—Ä–æ–µ–∫—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤\n\nüîç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã: .rs, .ts, .js, .py, .java, .cpp, .c, .go\nüìÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {}\nüî¢ –¢–æ–∫–µ–Ω–æ–≤: ~100\n",
            project_path,
            chrono::Utc::now().to_rfc3339()
        ));
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞–ø—Å—É–ª—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤  
    for file in files.iter() {
        let capsule_id = uuid::Uuid::new_v4();
        let layer_name = determine_layer(&file.path);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        let complexity = calculate_file_complexity(&file.path, &file.file_type);
        
        let capsule = Capsule {
            id: capsule_id,
            name: file.path.file_stem()
                .and_then(|s| s.to_str())
                .unwrap_or("unknown")
                .to_string(),
            capsule_type: determine_capsule_type(&file.file_type),
            file_path: file.path.clone(),
            line_start: 1,
            line_end: file.lines_count,
            size: file.lines_count,
            complexity,
            dependencies: vec![],
            layer: Some(layer_name.clone()),
            summary: None,
            description: Some(format!("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {}", file.path.file_name().unwrap_or_default().to_string_lossy())),
            warnings: convert_warnings_to_analysis_warnings(generate_file_warnings(&file.path, complexity)),
            status: CapsuleStatus::Active,
            priority: if complexity > 50 { Priority::High } else if complexity > 20 { Priority::Medium } else { Priority::Low },
            tags: vec![layer_name.to_lowercase()],
            metadata: std::collections::HashMap::new(),
            quality_score: if complexity > 50 { 0.4 } else if complexity > 20 { 0.7 } else { 0.9 },
            slogan: Some(format!("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {}", file.path.file_name().unwrap_or_default().to_string_lossy())),
            dependents: vec![],
            created_at: Some(chrono::Utc::now().to_rfc3339()),
        };
        
        capsules.insert(capsule_id, capsule);
        layers.entry(layer_name).or_insert_with(Vec::new).push(capsule_id);
    }

    // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ
    let mut graph_builder = CapsuleGraphBuilder::new();
    let capsules_vec: Vec<Capsule> = capsules.into_values().collect();
    let graph = graph_builder.build_graph(&capsules_vec)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞: {e}"))?;

    // –û–±–æ–≥–∞—â–∞–µ–º –≥—Ä–∞—Ñ
    let enricher = CapsuleEnricher::new();
    let enriched_graph = enricher.enrich_graph(&graph)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞: {e}"))?;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
    let validator = ValidatorOptimizer::new();
    let validated_graph = validator.validate_and_optimize(&enriched_graph)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"))?;

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ AI Compact —Ñ–æ—Ä–º–∞—Ç
    let exporter = Exporter::new();
    let ai_compact = exporter.export_to_ai_compact(&validated_graph)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ AI Compact: {e}"))?;

    Ok(ai_compact)
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å–ª–æ–π –ø–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
fn determine_layer(path: &std::path::Path) -> String {
    if let Some(parent) = path.parent() {
        if let Some(dir_name) = parent.file_name() {
            if let Some(dir_str) = dir_name.to_str() {
                return match dir_str {
                    "src" | "lib" => "Core".to_string(),
                    "api" | "controllers" | "routes" => "API".to_string(),
                    "ui" | "components" | "views" => "UI".to_string(),
                    "utils" | "helpers" | "tools" => "Utils".to_string(),
                    "models" | "entities" | "domain" => "Business".to_string(),
                    "services" | "business" => "Business".to_string(),
                    "data" | "database" | "db" => "Data".to_string(),
                    "tests" | "test" => "Tests".to_string(),
                    "mcp" | "server" => "Infrastructure".to_string(),
                    _ => "Other".to_string(),
                };
            }
        }
    }
    "Core".to_string()
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞–ø—Å—É–ª—ã –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
fn determine_capsule_type(file_type: &crate::types::FileType) -> CapsuleType {
    match file_type {
        crate::types::FileType::Rust => CapsuleType::Module,
        crate::types::FileType::JavaScript | crate::types::FileType::TypeScript => CapsuleType::Module,
        crate::types::FileType::Python => CapsuleType::Module,
        crate::types::FileType::Java => CapsuleType::Class,
        crate::types::FileType::Go => CapsuleType::Module,
        crate::types::FileType::Cpp | crate::types::FileType::C => CapsuleType::Module,
        _ => CapsuleType::Module,
    }
}

// –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
fn calculate_file_complexity(path: &std::path::Path, file_type: &crate::types::FileType) -> u32 {
    if let Ok(content) = std::fs::read_to_string(path) {
        let lines = content.lines().count();
        let functions = content.matches("fn ").count() + content.matches("function ").count() + content.matches("def ").count();
        let classes = content.matches("class ").count() + content.matches("struct ").count() + content.matches("impl ").count();
        let imports = content.matches("use ").count() + content.matches("import ").count() + content.matches("require(").count();
        let conditions = content.matches("if ").count() + content.matches("match ").count() + content.matches("switch ").count();
        let loops = content.matches("for ").count() + content.matches("while ").count() + content.matches("loop ").count();
        
        // –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        let base_complexity = (lines / 10) as u32;
        let functional_complexity = (functions * 3 + classes * 5 + imports) as u32;
        let logical_complexity = (conditions * 2 + loops * 2) as u32;
        
        base_complexity + functional_complexity + logical_complexity
    } else {
        1 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    }
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞
fn generate_file_warnings(path: &std::path::Path, complexity: u32) -> Vec<String> {
    let mut warnings = Vec::new();
    
    if complexity > 100 {
        warnings.push("–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª–∏".to_string());
    } else if complexity > 50 {
        warnings.push("–í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥".to_string());
    }
    
    if let Ok(content) = std::fs::read_to_string(path) {
        let lines = content.lines().count();
        if lines > 1000 {
            warnings.push("–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ".to_string());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        if !content.contains("///") && !content.contains("/**") && !content.contains("\"\"\"") {
            warnings.push("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è".to_string());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ todo/fixme
        if content.contains("TODO") || content.contains("FIXME") || content.contains("#–î–û–î–ï–õ–ê–¢–¨") {
            warnings.push("–°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∫–æ–¥".to_string());
        }
    }
    
    warnings
}

fn generate_mermaid_diagram(project_path: &str) -> std::result::Result<String, String> {
    let structure = get_project_structure(project_path)?;
    
    let mut result = String::new();
    result.push_str("graph TD\n");
    result.push_str(&format!("    A[{}] --> B[src]\n", 
        Path::new(project_path).file_name()
            .unwrap_or_default()
            .to_string_lossy()));
    
    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª—è—Ö –∏ –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    let mut module_dependencies = analyze_module_dependencies(project_path)?;
    let mut node_counter = 0;
    let mut file_nodes = std::collections::HashMap::new();
    
    // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤
    for (ext, count) in &structure.file_types {
        if !ext.is_empty() && count > &0 {
            let ext_clean = ext.replace(".", "");
            result.push_str(&format!("    B --> {}[{} files: {}]\n", ext_clean, ext, count));
            file_nodes.insert(ext.clone(), ext_clean);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    result.push_str("\n    %% –°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏\n");
    
    for dependency in &module_dependencies {
        let from_node = sanitize_node_name(&dependency.from_module);
        let to_node = sanitize_node_name(&dependency.to_module);
        
        // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –º–æ–¥—É–ª–µ–π –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
        if !file_nodes.values().any(|v| v == &from_node) {
            result.push_str(&format!("    {from_node}[{from_module}]\n", 
                from_module = dependency.from_module));
        }
        if !file_nodes.values().any(|v| v == &to_node) {
            result.push_str(&format!("    {to_node}[{to_module}]\n", 
                to_module = dependency.to_module));
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
        let arrow_type = match dependency.dependency_type.as_str() {
            "import" => "-->",
            "use" => "-.->",
            "include" => "==>",
            _ => "--->"
        };
        
        result.push_str(&format!("    {from_node} {arrow_type} {to_node}\n"));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é
    result.push_str("\n    %% –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è\n");
    result.push_str("    classDef rustFile fill:#dea584,stroke:#8b4513,stroke-width:2px\n");
    result.push_str("    classDef jsFile fill:#f7df1e,stroke:#323330,stroke-width:2px\n");
    result.push_str("    classDef pyFile fill:#3776ab,stroke:#ffde57,stroke-width:2px\n");
    result.push_str("    classDef configFile fill:#e6f3ff,stroke:#1e88e5,stroke-width:2px\n");
    
    Ok(result)
}

/// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
fn analyze_module_dependencies(project_path: &str) -> std::result::Result<Vec<ModuleDependency>, String> {
    let mut dependencies = Vec::new();
    let path = Path::new(project_path);
    
    if !path.exists() {
        return Err("–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç".to_string());
    }
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    scan_for_dependencies(path, &mut dependencies, "")?;
    
    Ok(dependencies)
}

/// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
fn scan_for_dependencies(dir: &Path, dependencies: &mut Vec<ModuleDependency>, current_module: &str) -> std::result::Result<(), String> {
    if let Ok(entries) = std::fs::read_dir(dir) {
        for entry in entries {
            if let Ok(entry) = entry {
                let path = entry.path();
                
                if path.is_dir() {
                    let dir_name = path.file_name()
                        .and_then(|n| n.to_str())
                        .unwrap_or("");
                    
                    if !dir_name.starts_with('.') && dir_name != "target" && dir_name != "node_modules" {
                        scan_for_dependencies(&path, dependencies, dir_name)?;
                    }
                } else if path.is_file() {
                    if let Some(ext) = path.extension() {
                        if let Some(ext_str) = ext.to_str() {
                            match ext_str {
                                "rs" => analyze_rust_file(&path, dependencies, current_module)?,
                                "js" | "ts" => analyze_js_file(&path, dependencies, current_module)?,
                                "py" => analyze_python_file(&path, dependencies, current_module)?,
                                _ => {}
                            }
                        }
                    }
                }
            }
        }
    }
    
    Ok(())
}

/// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Rust —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
fn analyze_rust_file(file_path: &Path, dependencies: &mut Vec<ModuleDependency>, current_module: &str) -> std::result::Result<(), String> {
    if let Ok(content) = std::fs::read_to_string(file_path) {
        let file_name = file_path.file_stem()
            .and_then(|n| n.to_str())
            .unwrap_or("unknown");
        
        let from_module = if current_module.is_empty() { 
            file_name.to_string() 
        } else { 
            format!("{}::{}", current_module, file_name) 
        };
        
        // –ò—â–µ–º use statements
        for line in content.lines() {
            let trimmed = line.trim();
            if trimmed.starts_with("use ") {
                if let Some(imported_module) = extract_rust_import(trimmed) {
                    dependencies.push(ModuleDependency {
                        from_module: from_module.clone(),
                        to_module: imported_module,
                        dependency_type: "use".to_string(),
                    });
                }
            }
        }
    }
    
    Ok(())
}

/// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç JavaScript/TypeScript —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
fn analyze_js_file(file_path: &Path, dependencies: &mut Vec<ModuleDependency>, current_module: &str) -> std::result::Result<(), String> {
    if let Ok(content) = std::fs::read_to_string(file_path) {
        let file_name = file_path.file_stem()
            .and_then(|n| n.to_str())
            .unwrap_or("unknown");
        
        let from_module = if current_module.is_empty() { 
            file_name.to_string() 
        } else { 
            format!("{}/{}", current_module, file_name) 
        };
        
        // –ò—â–µ–º import statements
        for line in content.lines() {
            let trimmed = line.trim();
            if trimmed.starts_with("import ") {
                if let Some(imported_module) = extract_js_import(trimmed) {
                    dependencies.push(ModuleDependency {
                        from_module: from_module.clone(),
                        to_module: imported_module,
                        dependency_type: "import".to_string(),
                    });
                }
            }
        }
    }
    
    Ok(())
}

/// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Python —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
fn analyze_python_file(file_path: &Path, dependencies: &mut Vec<ModuleDependency>, current_module: &str) -> std::result::Result<(), String> {
    if let Ok(content) = std::fs::read_to_string(file_path) {
        let file_name = file_path.file_stem()
            .and_then(|n| n.to_str())
            .unwrap_or("unknown");
        
        let from_module = if current_module.is_empty() { 
            file_name.to_string() 
        } else { 
            format!("{}.{}", current_module, file_name) 
        };
        
        // –ò—â–µ–º import statements
        for line in content.lines() {
            let trimmed = line.trim();
            if trimmed.starts_with("import ") || trimmed.starts_with("from ") {
                if let Some(imported_module) = extract_python_import(trimmed) {
                    dependencies.push(ModuleDependency {
                        from_module: from_module.clone(),
                        to_module: imported_module,
                        dependency_type: "import".to_string(),
                    });
                }
            }
        }
    }
    
    Ok(())
}

/// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –º–æ–¥—É–ª—è –∏–∑ Rust use statement
fn extract_rust_import(line: &str) -> Option<String> {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    if let Some(start) = line.find("use ") {
        let import_part = &line[start + 4..];
        if let Some(end) = import_part.find(';') {
            let module_path = import_part[..end].trim();
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –ø—É—Ç–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å)
            if let Some(first_part) = module_path.split("::").next() {
                return Some(first_part.to_string());
            }
        }
    }
    None
}

/// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –º–æ–¥—É–ª—è –∏–∑ JavaScript/TypeScript import statement
fn extract_js_import(line: &str) -> Option<String> {
    // –ò—â–µ–º 'from "module"' –∏–ª–∏ 'from 'module''
    if let Some(from_pos) = line.find("from ") {
        let from_part = &line[from_pos + 5..];
        if let Some(quote_start) = from_part.find(&['"', '\''][..]) {
            let quote_char = from_part.chars().nth(quote_start).unwrap();
            if let Some(quote_end) = from_part[quote_start + 1..].find(quote_char) {
                let module_name = &from_part[quote_start + 1..quote_start + 1 + quote_end];
                return Some(module_name.to_string());
            }
        }
    }
    None
}

/// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –º–æ–¥—É–ª—è –∏–∑ Python import statement
fn extract_python_import(line: &str) -> Option<String> {
    if line.starts_with("import ") {
        let import_part = &line[7..];
        if let Some(module_name) = import_part.split_whitespace().next() {
            return Some(module_name.to_string());
        }
    } else if line.starts_with("from ") {
        let from_part = &line[5..];
        if let Some(module_name) = from_part.split_whitespace().next() {
            return Some(module_name.to_string());
        }
    }
    None
}

/// –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω —É–∑–ª–æ–≤ –¥–ª—è Mermaid
fn sanitize_node_name(name: &str) -> String {
    name.replace("::", "_")
        .replace("/", "_")
        .replace(".", "_")
        .replace("-", "_")
        .chars()
        .filter(|c| c.is_alphanumeric() || *c == '_')
        .collect()
}

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
#[derive(Debug)]
struct ModuleDependency {
    pub from_module: String,
    pub to_module: String,
    pub dependency_type: String,
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è CLI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#[derive(Debug, serde::Serialize)]
pub struct ProjectStats {
    pub total_files: usize,
    pub total_lines: usize,
    pub file_types: std::collections::HashMap<String, usize>,
    pub project_path: String,
    pub scanned_at: String,
}

#[derive(Debug, serde::Serialize)]
pub struct ProjectStructure {
    pub total_files: usize,
    pub file_types: std::collections::HashMap<String, usize>,
    pub layers: Vec<String>,
    pub files: Vec<FileInfo>,
}

#[derive(Debug, serde::Serialize)]
pub struct FileInfo {
    pub path: String,
    pub name: String,
    pub extension: String,
    pub size: u64,
} 

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ AnalysisWarning
fn convert_warnings_to_analysis_warnings(string_warnings: Vec<String>) -> Vec<crate::types::AnalysisWarning> {
    string_warnings.into_iter().map(|warning| {
        let level = if warning.contains("–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è") || warning.contains("–∫—Ä–∏—Ç–∏—á") {
            crate::types::Priority::Critical
        } else if warning.contains("–≤—ã—Å–æ–∫–∞—è") || warning.contains("–í—ã—Å–æ–∫–∞—è") {
            crate::types::Priority::High
        } else {
            crate::types::Priority::Medium
        };
        
        crate::types::AnalysisWarning {
            message: warning.clone(),
            level,
            category: "file_analysis".to_string(),
            capsule_id: None,
            suggestion: Some(format!("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è: {}", warning)),
        }
    }).collect()
} 