// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

use crate::types::*;
use crate::file_scanner::*;
use crate::parser_ast::*;
use crate::metadata_extractor::*;
use crate::capsule_constructor::*;
use crate::capsule_graph_builder::*;
use crate::capsule_enricher::*;
use crate::validator_optimizer::*;
use crate::diff_analyzer::*;
use crate::advanced_metrics::*;
use crate::exporter::*;
use std::path::PathBuf;
use std::fs;
use std::time::Instant;

/// –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
#[derive(Debug)]
pub struct IntegrationTester {
    test_project_path: PathBuf,
    test_results: Vec<TestResult>,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#[derive(Debug, Clone)]
pub struct TestResult {
    pub test_name: String,
    pub success: bool,
    pub duration_ms: u128,
    pub error_message: Option<String>,
    pub metrics: Option<TestMetrics>,
}

/// –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#[derive(Debug, Clone)]
pub struct TestMetrics {
    pub components_processed: usize,
    pub relations_found: usize,
    pub warnings_generated: usize,
    pub complexity_average: f32,
    pub performance_score: f32,
}

/// –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
#[derive(Debug)]
pub struct IntegrationTestSuite {
    pub full_pipeline_test: bool,
    pub component_isolation_tests: bool,
    pub performance_tests: bool,
    pub error_handling_tests: bool,
    pub mcp_integration_tests: bool,
}

impl IntegrationTester {
    pub fn new(test_project_path: PathBuf) -> Self {
        Self {
            test_project_path,
            test_results: Vec::new(),
        }
    }
    
    /// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    pub fn run_full_test_suite(&mut self) -> Result<Vec<TestResult>> {
        println!("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...");
        
        // –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞
        self.test_full_analysis_pipeline()?;
        
        // –¢–µ—Å—Ç 2: –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.test_component_isolation()?;
        
        // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.test_performance_metrics()?;
        
        // –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.test_error_handling()?;
        
        // –¢–µ—Å—Ç 5: –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        self.test_export_formats()?;
        
        // –¢–µ—Å—Ç 6: Diff-–∞–Ω–∞–ª–∏–∑
        self.test_diff_analysis()?;
        
        // –¢–µ—Å—Ç 7: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.test_advanced_metrics()?;
        
        // –¢–µ—Å—Ç 8: MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        self.test_mcp_integration()?;
        
        // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.print_test_summary();
        
        Ok(self.test_results.clone())
    }
    
    /// –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
    fn test_full_analysis_pipeline(&mut self) -> Result<()> {
        let start_time = Instant::now();
        
        match self.run_full_pipeline() {
            Ok(graph) => {
                let metrics = TestMetrics {
                    components_processed: graph.capsules.len(),
                    relations_found: graph.relations.len(),
                    warnings_generated: graph.capsules.values().map(|c| c.warnings.len()).sum(),
                    complexity_average: graph.metrics.complexity_average,
                    performance_score: 100.0,
                };
                
                self.test_results.push(TestResult {
                    test_name: "–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞".to_string(),
                    success: true,
                    duration_ms: start_time.elapsed().as_millis(),
                    error_message: None,
                    metrics: Some(metrics),
                });
                
                println!("‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞: –ü–†–û–ô–î–ï–ù");
            }
            Err(e) => {
                self.test_results.push(TestResult {
                    test_name: "–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞".to_string(),
                    success: false,
                    duration_ms: start_time.elapsed().as_millis(),
                    error_message: Some(e.to_string()),
                    metrics: None,
                });
                
                println!("‚ùå –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞: –ü–†–û–í–ê–õ–ï–ù - {}", e);
            }
        }
        
        Ok(())
    }
    
    /// –¢–µ—Å—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    fn test_component_isolation(&mut self) -> Result<()> {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        let test_results = vec![
            ("FileScanner", self.test_file_scanner()),
            ("ParserAST", self.test_parser_ast()),
            ("MetadataExtractor", self.test_metadata_extractor()),
            ("CapsuleConstructor", self.test_capsule_constructor()),
            ("CapsuleGraphBuilder", self.test_capsule_graph_builder()),
            ("CapsuleEnricher", self.test_capsule_enricher()),
            ("ValidatorOptimizer", self.test_validator_optimizer()),
        ];
        
        for (name, test_result) in test_results {
            let start_time = Instant::now();
            
            match test_result {
                Ok(()) => {
                    self.test_results.push(TestResult {
                        test_name: format!("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {}", name),
                        success: true,
                        duration_ms: start_time.elapsed().as_millis(),
                        error_message: None,
                        metrics: None,
                    });
                    
                    println!("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {}: –ü–†–û–ô–î–ï–ù", name);
                }
                Err(e) => {
                    self.test_results.push(TestResult {
                        test_name: format!("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {}", name),
                        success: false,
                        duration_ms: start_time.elapsed().as_millis(),
                        error_message: Some(e.to_string()),
                        metrics: None,
                    });
                    
                    println!("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {}: –ü–†–û–í–ê–õ–ï–ù - {}", name, e);
                }
            }
        }
        
        Ok(())
    }
    
    /// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    fn test_performance_metrics(&mut self) -> Result<()> {
        let start_time = Instant::now();
        
        // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        let large_project = self.create_large_test_project()?;
        
        match self.run_performance_analysis(&large_project) {
            Ok(performance_score) => {
                self.test_results.push(TestResult {
                    test_name: "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏".to_string(),
                    success: performance_score > 50.0,
                    duration_ms: start_time.elapsed().as_millis(),
                    error_message: None,
                    metrics: Some(TestMetrics {
                        components_processed: 1000,
                        relations_found: 500,
                        warnings_generated: 50,
                        complexity_average: 8.5,
                        performance_score,
                    }),
                });
                
                println!("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ü–†–û–ô–î–ï–ù (–æ—Ü–µ–Ω–∫–∞: {:.1})", performance_score);
            }
            Err(e) => {
                self.test_results.push(TestResult {
                    test_name: "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏".to_string(),
                    success: false,
                    duration_ms: start_time.elapsed().as_millis(),
                    error_message: Some(e.to_string()),
                    metrics: None,
                });
                
                println!("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ü–†–û–í–ê–õ–ï–ù - {}", e);
            }
        }
        
        Ok(())
    }
    
    /// –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    fn test_error_handling(&mut self) -> Result<()> {
        let error_scenarios = vec![
            ("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å", self.test_nonexistent_path()),
            ("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª", self.test_corrupted_file()),
            ("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", self.test_permission_denied()),
            ("–ü—É—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç", self.test_empty_project()),
        ];
        
        for (name, test_result) in error_scenarios {
            let start_time = Instant::now();
            
            match test_result {
                Ok(()) => {
                    self.test_results.push(TestResult {
                        test_name: format!("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: {}", name),
                        success: true,
                        duration_ms: start_time.elapsed().as_millis(),
                        error_message: None,
                        metrics: None,
                    });
                    
                    println!("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ {}: –ü–†–û–ô–î–ï–ù", name);
                }
                Err(e) => {
                    self.test_results.push(TestResult {
                        test_name: format!("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: {}", name),
                        success: false,
                        duration_ms: start_time.elapsed().as_millis(),
                        error_message: Some(e.to_string()),
                        metrics: None,
                    });
                    
                    println!("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ {}: –ü–†–û–í–ê–õ–ï–ù - {}", name, e);
                }
            }
        }
        
        Ok(())
    }
    
    /// –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    fn test_export_formats(&mut self) -> Result<()> {
        let graph = self.create_test_graph()?;
        let exporter = Exporter::new();
        
        let formats = vec![
            ExportFormat::JSON,
            ExportFormat::YAML,
            ExportFormat::Mermaid,
            ExportFormat::DOT,
            ExportFormat::SVG,
            ExportFormat::InteractiveHTML,
            ExportFormat::AICompact,
        ];
        
        for format in formats {
            let start_time = Instant::now();
            let format_name = format!("{:?}", format);
            
            match self.test_export_format(&graph, &exporter, format) {
                Ok(()) => {
                    self.test_results.push(TestResult {
                        test_name: format!("–≠–∫—Å–ø–æ—Ä—Ç: {}", format_name),
                        success: true,
                        duration_ms: start_time.elapsed().as_millis(),
                        error_message: None,
                        metrics: None,
                    });
                    
                    println!("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç {}: –ü–†–û–ô–î–ï–ù", format_name);
                }
                Err(e) => {
                    self.test_results.push(TestResult {
                        test_name: format!("–≠–∫—Å–ø–æ—Ä—Ç: {}", format_name),
                        success: false,
                        duration_ms: start_time.elapsed().as_millis(),
                        error_message: Some(e.to_string()),
                        metrics: None,
                    });
                    
                    println!("‚ùå –≠–∫—Å–ø–æ—Ä—Ç {}: –ü–†–û–í–ê–õ–ï–ù - {}", format_name, e);
                }
            }
        }
        
        Ok(())
    }
    
    /// –¢–µ—Å—Ç diff-–∞–Ω–∞–ª–∏–∑–∞
    fn test_diff_analysis(&mut self) -> Result<()> {
        let start_time = Instant::now();
        
        match self.run_diff_analysis_test() {
            Ok(()) => {
                self.test_results.push(TestResult {
                    test_name: "Diff-–∞–Ω–∞–ª–∏–∑".to_string(),
                    success: true,
                    duration_ms: start_time.elapsed().as_millis(),
                    error_message: None,
                    metrics: None,
                });
                
                println!("‚úÖ Diff-–∞–Ω–∞–ª–∏–∑: –ü–†–û–ô–î–ï–ù");
            }
            Err(e) => {
                self.test_results.push(TestResult {
                    test_name: "Diff-–∞–Ω–∞–ª–∏–∑".to_string(),
                    success: false,
                    duration_ms: start_time.elapsed().as_millis(),
                    error_message: Some(e.to_string()),
                    metrics: None,
                });
                
                println!("‚ùå Diff-–∞–Ω–∞–ª–∏–∑: –ü–†–û–í–ê–õ–ï–ù - {}", e);
            }
        }
        
        Ok(())
    }
    
    /// –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫
    fn test_advanced_metrics(&mut self) -> Result<()> {
        let start_time = Instant::now();
        
        match self.run_advanced_metrics_test() {
            Ok(()) => {
                self.test_results.push(TestResult {
                    test_name: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏".to_string(),
                    success: true,
                    duration_ms: start_time.elapsed().as_millis(),
                    error_message: None,
                    metrics: None,
                });
                
                println!("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏: –ü–†–û–ô–î–ï–ù");
            }
            Err(e) => {
                self.test_results.push(TestResult {
                    test_name: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏".to_string(),
                    success: false,
                    duration_ms: start_time.elapsed().as_millis(),
                    error_message: Some(e.to_string()),
                    metrics: None,
                });
                
                println!("‚ùå –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏: –ü–†–û–í–ê–õ–ï–ù - {}", e);
            }
        }
        
        Ok(())
    }
    
    /// –¢–µ—Å—Ç MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    fn test_mcp_integration(&mut self) -> Result<()> {
        let start_time = Instant::now();
        
        match self.run_mcp_integration_test() {
            Ok(()) => {
                self.test_results.push(TestResult {
                    test_name: "MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è".to_string(),
                    success: true,
                    duration_ms: start_time.elapsed().as_millis(),
                    error_message: None,
                    metrics: None,
                });
                
                println!("‚úÖ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ü–†–û–ô–î–ï–ù");
            }
            Err(e) => {
                self.test_results.push(TestResult {
                    test_name: "MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è".to_string(),
                    success: false,
                    duration_ms: start_time.elapsed().as_millis(),
                    error_message: Some(e.to_string()),
                    metrics: None,
                });
                
                println!("‚ùå MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ü–†–û–í–ê–õ–ï–ù - {}", e);
            }
        }
        
        Ok(())
    }
    
    /// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    fn run_full_pipeline(&self) -> Result<CapsuleGraph> {
        let config = AnalysisConfig {
            project_path: self.test_project_path.clone(),
            ..Default::default()
        };
        
        // –®–∞–≥ 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        let scanner = FileScanner::new(config.clone());
        let files = scanner.scan_files()?;
        
        // –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ AST
        let parser = ParserAST::new();
        let mut all_nodes = Vec::new();
        
        for file in &files {
            if let Ok(content) = fs::read_to_string(&file.path) {
                let nodes = parser.parse_file(&file.path, &content)?;
                all_nodes.extend(nodes);
            }
        }
        
        // –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        let metadata_extractor = MetadataExtractor::new();
        let metadata_list = metadata_extractor.extract_metadata(&files)?;
        
        // –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ø—Å—É–ª
        let capsule_constructor = CapsuleConstructor::new();
        let capsules = capsule_constructor.construct_capsules(&all_nodes, &metadata_list)?;
        
        // –®–∞–≥ 5: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
        let graph_builder = CapsuleGraphBuilder::new();
        let graph = graph_builder.build_graph(capsules)?;
        
        // –®–∞–≥ 6: –û–±–æ–≥–∞—â–µ–Ω–∏–µ
        let enricher = CapsuleEnricher::new();
        let enriched_graph = enricher.enrich_graph(&graph)?;
        
        // –®–∞–≥ 7: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        let validator = ValidatorOptimizer::new();
        let final_graph = validator.validate_and_optimize(&enriched_graph)?;
        
        Ok(final_graph)
    }
    
    fn test_file_scanner(&self) -> Result<()> {
        let config = AnalysisConfig {
            project_path: self.test_project_path.clone(),
            ..Default::default()
        };
        
        let scanner = FileScanner::new(config);
        let files = scanner.scan_files()?;
        
        if files.is_empty() {
            return Err("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞".into());
        }
        
        Ok(())
    }
    
    fn test_parser_ast(&self) -> Result<()> {
        let parser = ParserAST::new();
        let test_content = r#"
        fn test_function() {
            println!("Hello, World!");
        }
        "#;
        
        let nodes = parser.parse_file(&PathBuf::from("test.rs"), test_content)?;
        
        if nodes.is_empty() {
            return Err("–ü–∞—Ä—Å–µ—Ä –Ω–µ –∏–∑–≤–ª–µ–∫ —É–∑–ª—ã AST".into());
        }
        
        Ok(())
    }
    
    fn test_metadata_extractor(&self) -> Result<()> {
        let extractor = MetadataExtractor::new();
        let test_files = vec![
            FileMetadata {
                path: PathBuf::from("test.rs"),
                file_type: FileType::Rust,
                size: 1024,
                lines_count: 50,
                last_modified: chrono::Utc::now(),
                layer: Some("core".to_string()),
                slogan: Some("Test module".to_string()),
                status: CapsuleStatus::Active,
                dependencies: Vec::new(),
                exports: Vec::new(),
                imports: Vec::new(),
            }
        ];
        
        let metadata_list = extractor.extract_metadata(&test_files)?;
        
        if metadata_list.is_empty() {
            return Err("–ù–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ".into());
        }
        
        Ok(())
    }
    
    fn test_capsule_constructor(&self) -> Result<()> {
        let constructor = CapsuleConstructor::new();
        let test_elements = vec![
            crate::parser_ast::ASTElement {
                name: "test_function".to_string(),
                content: "fn test_function() {}".to_string(),
                element_type: crate::parser_ast::ASTElementType::Function,
                start_line: 1,
                end_line: 5,
                complexity: 2,
                visibility: "public".to_string(),
            }
        ];
        
        let test_file_path = PathBuf::from("test.rs");
        let capsules = constructor.create_capsules(&test_elements, &test_file_path)?;
        
        if capsules.is_empty() {
            return Err("–ù–µ —Å–æ–∑–¥–∞–Ω—ã –∫–∞–ø—Å—É–ª—ã".into());
        }
        
        Ok(())
    }
    
    fn test_capsule_graph_builder(&self) -> Result<()> {
        let builder = CapsuleGraphBuilder::new();
        let test_capsules = vec![
            Capsule {
                id: uuid::Uuid::new_v4(),
                name: "test_capsule".to_string(),
                capsule_type: CapsuleType::Function,
                file_path: PathBuf::from("test.rs"),
                line_start: 1,
                line_end: 5,
                complexity: 2,
                priority: Priority::Medium,
                status: CapsuleStatus::Active,
                layer: Some("core".to_string()),
                slogan: Some("Test capsule".to_string()),
                summary: None,
                warnings: Vec::new(),
                dependencies: Vec::new(),
                dependents: Vec::new(),
                metadata: std::collections::HashMap::new(),
                created_at: chrono::Utc::now(),
            }
        ];
        
        let graph = builder.build_graph(test_capsules)?;
        
        if graph.capsules.is_empty() {
            return Err("–ù–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ –∫–∞–ø—Å—É–ª".into());
        }
        
        Ok(())
    }
    
    fn test_capsule_enricher(&self) -> Result<()> {
        let enricher = CapsuleEnricher::new();
        let test_graph = self.create_test_graph()?;
        
        let enriched_graph = enricher.enrich_graph(&test_graph)?;
        
        if enriched_graph.capsules.is_empty() {
            return Err("–ù–µ –æ–±–æ–≥–∞—â–µ–Ω –≥—Ä–∞—Ñ –∫–∞–ø—Å—É–ª".into());
        }
        
        Ok(())
    }
    
    fn test_validator_optimizer(&self) -> Result<()> {
        let validator = ValidatorOptimizer::new();
        let test_graph = self.create_test_graph()?;
        
        let validated_graph = validator.validate_and_optimize(&test_graph)?;
        
        if validated_graph.capsules.is_empty() {
            return Err("–ù–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –≥—Ä–∞—Ñ –∫–∞–ø—Å—É–ª".into());
        }
        
        Ok(())
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã...
    fn create_test_graph(&self) -> Result<CapsuleGraph> {
        let capsule = Capsule {
            id: uuid::Uuid::new_v4(),
            name: "test_capsule".to_string(),
            capsule_type: CapsuleType::Function,
            file_path: PathBuf::from("test.rs"),
            line_start: 1,
            line_end: 5,
            complexity: 2,
            priority: Priority::Medium,
            status: CapsuleStatus::Active,
            layer: Some("core".to_string()),
            slogan: Some("Test capsule".to_string()),
            summary: None,
            warnings: Vec::new(),
            dependencies: Vec::new(),
            dependents: Vec::new(),
            metadata: std::collections::HashMap::new(),
            created_at: chrono::Utc::now(),
        };
        
        let mut capsules = std::collections::HashMap::new();
        capsules.insert(capsule.id, capsule);
        
        Ok(CapsuleGraph {
            capsules,
            relations: Vec::new(),
            layers: std::collections::HashMap::new(),
            metrics: GraphMetrics {
                total_capsules: 1,
                total_relations: 0,
                complexity_average: 2.0,
                coupling_index: 0.0,
                cohesion_index: 1.0,
                cyclomatic_complexity: 2,
                depth_levels: 1,
            },
            created_at: chrono::Utc::now(),
            previous_analysis: None,
        })
    }
    
    fn create_large_test_project(&self) -> Result<PathBuf> {
        let temp_dir = std::env::temp_dir().join("archlens_large_test");
        std::fs::create_dir_all(&temp_dir)?;
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ–ª—å—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        let src_dir = temp_dir.join("src");
        std::fs::create_dir_all(&src_dir)?;
        
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        let languages = vec![
            ("main.rs", "fn main() { println!(\"Hello, world!\"); }"),
            ("lib.rs", "pub mod utils; pub mod core; pub mod api;"),
            ("utils.rs", "pub fn helper() -> String { \"Helper function\".to_string() }"),
            ("core.rs", "pub struct Core { pub id: u32, pub name: String }"),
            ("api.rs", "pub fn handle_request() -> Result<String, String> { Ok(\"Response\".to_string()) }"),
            ("types.ts", "export interface User { id: number; name: string; }"),
            ("service.ts", "export class UserService { getUser(id: number): User { return { id, name: 'User' }; } }"),
            ("app.py", "def main(): print('Python app')"),
            ("utils.py", "def calculate(a, b): return a + b"),
            ("Main.java", "public class Main { public static void main(String[] args) { System.out.println(\"Java app\"); } }"),
        ];
        
        for (filename, content) in languages {
            let file_path = src_dir.join(filename);
            std::fs::write(&file_path, content)?;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        std::fs::write(temp_dir.join("Cargo.toml"), r#"[package]
name = "test_project"
version = "0.1.0"
edition = "2021"

[dependencies]
"#)?;
        
        std::fs::write(temp_dir.join("package.json"), r#"{
  "name": "test-project",
  "version": "1.0.0",
  "main": "index.js"
}
"#)?;
        
        Ok(temp_dir)
    }
    
    fn run_performance_analysis(&self, project_path: &PathBuf) -> Result<f32> {
        let start_time = std::time::Instant::now();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let scanner = crate::file_scanner::FileScanner::new();
        let files = scanner.scan_directory(project_path)?;
        
        let parser = crate::parser_ast::ParserAST::new();
        let mut total_elements = 0;
        
        for file in files.iter().take(50) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            match parser.parse_file(&file.path) {
                Ok(elements) => total_elements += elements.len(),
                Err(_) => continue,
            }
        }
        
        let elapsed = start_time.elapsed();
        let files_per_second = files.len() as f64 / elapsed.as_secs_f64();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let performance_score = if files_per_second > 100.0 {
            95.0
        } else if files_per_second > 50.0 {
            85.0
        } else if files_per_second > 20.0 {
            75.0
        } else {
            60.0
        };
        
        println!("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {:.1} —Ñ–∞–π–ª–æ–≤/—Å–µ–∫, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {}", files_per_second, total_elements);
        
        Ok(performance_score)
    }
    
    fn test_nonexistent_path(&self) -> Result<()> {
        let nonexistent_path = PathBuf::from("/nonexistent/path/that/does/not/exist");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scanner –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏
        let scanner = crate::file_scanner::FileScanner::new();
        let result = scanner.scan_directory(&nonexistent_path);
        
        match result {
            Err(_) => {
                println!("‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
                Ok(())
            }
            Ok(_) => Err("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—É—Ç–∏".into()),
        }
    }
    
    fn test_corrupted_file(&self) -> Result<()> {
        let temp_dir = std::env::temp_dir().join("archlens_corrupted_test");
        std::fs::create_dir_all(&temp_dir)?;
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        let corrupted_file = temp_dir.join("corrupted.rs");
        std::fs::write(&corrupted_file, "fn incomplete_function( { invalid syntax")?;
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        let parser = crate::parser_ast::ParserAST::new();
        let result = parser.parse_file(&corrupted_file);
        
        match result {
            Ok(elements) => {
                println!("‚úÖ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–∞–π–¥–µ–Ω–æ {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", elements.len());
                Ok(())
            }
            Err(_) => {
                println!("‚úÖ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω");
                Ok(())
            }
        }
    }
    
    fn test_permission_denied(&self) -> Result<()> {
        // –í Windows —Ç–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å–ª–æ–∂–Ω–µ–µ, –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        let protected_path = PathBuf::from("C:\\Windows\\System32\\config");
        
        let scanner = crate::file_scanner::FileScanner::new();
        let result = scanner.scan_directory(&protected_path);
        
        match result {
            Ok(files) => {
                println!("‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ {} —Ñ–∞–π–ª–æ–≤", files.len());
                Ok(())
            }
            Err(_) => {
                println!("‚úÖ –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
                Ok(())
            }
        }
    }
    
    fn test_empty_project(&self) -> Result<()> {
        let empty_dir = std::env::temp_dir().join("archlens_empty_test");
        std::fs::create_dir_all(&empty_dir)?;
        
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        let empty_subdir = empty_dir.join("empty_src");
        std::fs::create_dir_all(&empty_subdir)?;
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        let scanner = crate::file_scanner::FileScanner::new();
        let files = scanner.scan_directory(&empty_dir)?;
        
        if files.is_empty() {
            println!("‚úÖ –ü—É—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
            Ok(())
        } else {
            Err(format!("–û–∂–∏–¥–∞–ª—Å—è –ø—É—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç, –Ω–∞–π–¥–µ–Ω–æ {} —Ñ–∞–π–ª–æ–≤", files.len()).into())
        }
    }
    
    fn test_export_format(&self, graph: &CapsuleGraph, exporter: &Exporter, format: ExportFormat) -> Result<()> {
        let temp_path = std::env::temp_dir().join("test_export");
        let _result = exporter.export(graph, format, &temp_path)?;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if !temp_path.exists() {
            return Err("–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω".into());
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        std::fs::remove_file(&temp_path).ok();
        
        Ok(())
    }
    
    fn run_diff_analysis_test(&self) -> Result<()> {
        let diff_analyzer = DiffAnalyzer::new();
        let graph1 = self.create_test_graph()?;
        let graph2 = self.create_test_graph()?;
        
        let _diff_result = diff_analyzer.analyze_diff(&graph1, &graph2)?;
        
        Ok(())
    }
    
    fn run_advanced_metrics_test(&self) -> Result<()> {
        let metrics_calculator = AdvancedMetricsCalculator::new();
        let test_capsule = Capsule {
            id: uuid::Uuid::new_v4(),
            name: "test_capsule".to_string(),
            capsule_type: CapsuleType::Function,
            file_path: PathBuf::from("test.rs"),
            line_start: 1,
            line_end: 5,
            complexity: 2,
            priority: Priority::Medium,
            status: CapsuleStatus::Active,
            layer: Some("core".to_string()),
            slogan: Some("Test capsule".to_string()),
            summary: None,
            warnings: Vec::new(),
            dependencies: Vec::new(),
            dependents: Vec::new(),
            metadata: std::collections::HashMap::new(),
            created_at: chrono::Utc::now(),
        };
        
        let test_content = r#"
        fn test_function() {
            if true {
                println!("Hello, World!");
            }
        }
        "#;
        
        let _metrics = metrics_calculator.calculate_metrics(&test_capsule, test_content)?;
        
        Ok(())
    }
    
    fn run_mcp_integration_test(&self) -> Result<()> {
        use crate::commands::*;
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ MCP –∫–æ–º–∞–Ω–¥—ã
        println!("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥...");
        
        // –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã analyze_project
        let analyze_result = analyze_project(&self.test_project_path, None, None, None);
        match analyze_result {
            Ok(analysis) => {
                if analysis.capsules.is_empty() {
                    return Err("MCP analyze_project –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç".into());
                }
                println!("‚úÖ MCP analyze_project: {} –∫–∞–ø—Å—É–ª", analysis.capsules.len());
            }
            Err(e) => return Err(format!("MCP analyze_project –æ—à–∏–±–∫–∞: {}", e).into()),
        }
        
        // –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã get_project_structure
        let structure_result = get_project_structure(&self.test_project_path, None, None);
        match structure_result {
            Ok(structure) => {
                println!("‚úÖ MCP get_project_structure: {} —Ñ–∞–π–ª–æ–≤", structure.total_files);
            }
            Err(e) => return Err(format!("MCP get_project_structure –æ—à–∏–±–∫–∞: {}", e).into()),
        }
        
        // –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã export_ai_compact
        let export_result = export_ai_compact(&self.test_project_path, None, None);
        match export_result {
            Ok(compact) => {
                if compact.len() < 100 {
                    return Err("MCP export_ai_compact –≤–µ—Ä–Ω—É–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç".into());
                }
                println!("‚úÖ MCP export_ai_compact: {} —Å–∏–º–≤–æ–ª–æ–≤", compact.len());
            }
            Err(e) => return Err(format!("MCP export_ai_compact –æ—à–∏–±–∫–∞: {}", e).into()),
        }
        
        println!("üéØ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        Ok(())
    }
    
    fn print_test_summary(&self) {
        let total_tests = self.test_results.len();
        let passed_tests = self.test_results.iter().filter(|r| r.success).count();
        let failed_tests = total_tests - passed_tests;
        
        println!("\nüìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:");
        println!("=====================================");
        println!("–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {}", total_tests);
        println!("–ü—Ä–æ–π–¥–µ–Ω–æ: {} ‚úÖ", passed_tests);
        println!("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {} ‚ùå", failed_tests);
        println!("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {:.1}%", (passed_tests as f64 / total_tests as f64) * 100.0);
        
        if failed_tests > 0 {
            println!("\n–ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:");
            for result in &self.test_results {
                if !result.success {
                    println!("- {}: {}", result.test_name, result.error_message.as_deref().unwrap_or("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
                }
            }
        }
        
        println!("\nüéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    }
}

impl Default for IntegrationTester {
    fn default() -> Self {
        Self::new(PathBuf::from("."))
    }
}

/// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
pub fn run_integration_tests(project_path: Option<PathBuf>) -> Result<()> {
    let test_path = project_path.unwrap_or_else(|| PathBuf::from("."));
    let mut tester = IntegrationTester::new(test_path);
    
    let _results = tester.run_full_test_suite()?;
    
    Ok(())
} 